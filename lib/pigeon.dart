// Autogenerated from Pigeon (v7.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum Unit {
  none,
  kpa,
  mmhg,
  c,
  f,
  percent,
  bpmBeats,
  bpmBreaths,
  nanovolts,
  microvolts,
  millivolts,
  volts,
  ppm,
  pacerPerMin,
  rpm,
  mah,
  ma,
  mOm,
  gDl,
  mmoL,
  mlDl,
  j,
}

enum AlarmStatus {
  notAlarming,
  alarming,
}

enum DataStatus {
  valid,
  invalid,
  underrange,
  overrange,
}

class XSeriesDevice {
  XSeriesDevice({
    required this.address,
    required this.serialNumber,
  });

  String address;

  String serialNumber;

  Object encode() {
    return <Object?>[
      address,
      serialNumber,
    ];
  }

  static XSeriesDevice decode(Object result) {
    result as List<Object?>;
    return XSeriesDevice(
      address: result[0]! as String,
      serialNumber: result[1]! as String,
    );
  }
}

class ValueUnitPair {
  ValueUnitPair({
    required this.value,
    required this.unit,
    required this.isValid,
  });

  double value;

  Unit unit;

  bool isValid;

  Object encode() {
    return <Object?>[
      value,
      unit.index,
      isValid,
    ];
  }

  static ValueUnitPair decode(Object result) {
    result as List<Object?>;
    return ValueUnitPair(
      value: result[0]! as double,
      unit: Unit.values[result[1]! as int],
      isValid: result[2]! as bool,
    );
  }
}

class TrendData {
  TrendData({
    required this.value,
    required this.alarm,
    required this.dataStatus,
  });

  ValueUnitPair value;

  AlarmStatus alarm;

  DataStatus dataStatus;

  Object encode() {
    return <Object?>[
      value.encode(),
      alarm.index,
      dataStatus.index,
    ];
  }

  static TrendData decode(Object result) {
    result as List<Object?>;
    return TrendData(
      value: ValueUnitPair.decode(result[0]! as List<Object?>),
      alarm: AlarmStatus.values[result[1]! as int],
      dataStatus: DataStatus.values[result[2]! as int],
    );
  }
}

class VitalSigns {
  VitalSigns({
    required this.spo2,
  });

  TrendData spo2;

  Object encode() {
    return <Object?>[
      spo2.encode(),
    ];
  }

  static VitalSigns decode(Object result) {
    result as List<Object?>;
    return VitalSigns(
      spo2: TrendData.decode(result[0]! as List<Object?>),
    );
  }
}

class _ZollSdkHostApiCodec extends StandardMessageCodec {
  const _ZollSdkHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is XSeriesDevice) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return XSeriesDevice.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ZollSdkHostApi {
  /// Constructor for [ZollSdkHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ZollSdkHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ZollSdkHostApiCodec();

  Future<void> browserStart() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ZollSdkHostApi.browserStart', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> browserStop() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ZollSdkHostApi.browserStop', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<int> deviceGetCurrentVitalSigns(String? arg_callbackId, XSeriesDevice arg_device, String arg_password) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ZollSdkHostApi.deviceGetCurrentVitalSigns', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_callbackId, arg_device, arg_password]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }
}

class _ZollSdkFlutterApiCodec extends StandardMessageCodec {
  const _ZollSdkFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is TrendData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ValueUnitPair) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is VitalSigns) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is XSeriesDevice) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return TrendData.decode(readValue(buffer)!);
      case 129: 
        return ValueUnitPair.decode(readValue(buffer)!);
      case 130: 
        return VitalSigns.decode(readValue(buffer)!);
      case 131: 
        return XSeriesDevice.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class ZollSdkFlutterApi {
  static const MessageCodec<Object?> codec = _ZollSdkFlutterApiCodec();

  void onDeviceFound(XSeriesDevice device);

  void onDeviceLost(XSeriesDevice device);

  void onBrowseError();

  void onVitalSignsReceived(String? callbackId, int requestCode, String serialNumber, VitalSigns? report);

  static void setup(ZollSdkFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ZollSdkFlutterApi.onDeviceFound', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        print("channel");
        channel.setMessageHandler((Object? message) async {
           print("channel 2");
          assert(message != null,
          'Argument for dev.flutter.pigeon.ZollSdkFlutterApi.onDeviceFound was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final XSeriesDevice? arg_device = (args[0] as XSeriesDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.ZollSdkFlutterApi.onDeviceFound was null, expected non-null XSeriesDevice.');
          print(arg_device);
          api.onDeviceFound(arg_device!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ZollSdkFlutterApi.onDeviceLost', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ZollSdkFlutterApi.onDeviceLost was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final XSeriesDevice? arg_device = (args[0] as XSeriesDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.ZollSdkFlutterApi.onDeviceLost was null, expected non-null XSeriesDevice.');
          api.onDeviceLost(arg_device!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ZollSdkFlutterApi.onBrowseError', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.onBrowseError();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ZollSdkFlutterApi.onVitalSignsReceived', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ZollSdkFlutterApi.onVitalSignsReceived was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_callbackId = (args[0] as String?);
          final int? arg_requestCode = (args[1] as int?);
          assert(arg_requestCode != null,
              'Argument for dev.flutter.pigeon.ZollSdkFlutterApi.onVitalSignsReceived was null, expected non-null int.');
          final String? arg_serialNumber = (args[2] as String?);
          assert(arg_serialNumber != null,
              'Argument for dev.flutter.pigeon.ZollSdkFlutterApi.onVitalSignsReceived was null, expected non-null String.');
          final VitalSigns? arg_report = (args[3] as VitalSigns?);
          api.onVitalSignsReceived(arg_callbackId, arg_requestCode!, arg_serialNumber!, arg_report);
          return;
        });
      }
    }
  }
}
