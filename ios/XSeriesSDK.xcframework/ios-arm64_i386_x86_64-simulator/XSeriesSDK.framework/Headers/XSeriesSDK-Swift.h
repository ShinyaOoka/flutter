#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef XSERIESSDK_SWIFT_H
#define XSERIESSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="XSeriesSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

SWIFT_CLASS("_TtC10XSeriesSDK5About")
@interface About : NSObject
- (NSString * _Nonnull)Version SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Alarm status
/// For parameters that support alarms, indicates whether the parameter is alarming.
/// Present for the following parameters: Etco2, Fico2, NIBP (Sys/Dia/Map),
/// IBP (Sys/Dia/Map), Spo2, SpCo, SpMet, SpHb, SpOC, PI, PVI, Resp, Hr, Temp (all channels).
/// 0 = Not Alarming
/// 1 = Alarming
typedef SWIFT_ENUM(NSInteger, AlarmStatus, open) {
  AlarmStatusNot_alarming = 0,
  AlarmStatusAlarming = 1,
};

@class NSNumber;
@class NSArray;

/// Represents Analysis result for twelve lead
SWIFT_CLASS("_TtC10XSeriesSDK14AnalysisResult")
@interface AnalysisResult : NSObject
@property (nonatomic, strong) NSNumber * _Nullable _heartRate;
@property (nonatomic, strong) NSNumber * _Nullable _prInterval;
@property (nonatomic, strong) NSNumber * _Nullable _qtInterval;
@property (nonatomic, strong) NSNumber * _Nullable _correctedQTInterval;
@property (nonatomic, strong) NSNumber * _Nullable _qrsDuration;
@property (nonatomic, strong) NSNumber * _Nullable _pAxis;
@property (nonatomic, strong) NSNumber * _Nullable _qrsAxis;
@property (nonatomic, strong) NSNumber * _Nullable _tAxis;
@property (nonatomic, strong) NSArray * _Nonnull _stjValues;
- (nonnull instancetype)initWithHeartRate:(NSNumber * _Nullable)heartRate prInterval:(NSNumber * _Nullable)prInterval qtInterval:(NSNumber * _Nullable)qtInterval correctedQTInterval:(NSNumber * _Nullable)correctedQTInterval qrsDuration:(NSNumber * _Nullable)qrsDuration pAxis:(NSNumber * _Nullable)pAxis qrsAxis:(NSNumber * _Nullable)qrsAxis tAxis:(NSNumber * _Nullable)tAxis statements:(NSArray<NSString *> * _Nonnull)statements stjValues:(NSArray<NSNumber *> * _Nonnull)stjValues OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSDate;
@class TrendReport;
@class Event;
@class Snapshot;
@class Patient;
@class TwelveLead;
@class Defibrillator;

SWIFT_CLASS("_TtC10XSeriesSDK4Case")
@interface Case : NSObject
@property (nonatomic, readonly, copy) NSDate * _Nonnull caseDate;
@property (nonatomic, readonly, copy) NSArray<TrendReport *> * _Nonnull trends;
@property (nonatomic, readonly, copy) NSArray<Event *> * _Nonnull events;
@property (nonatomic, readonly, copy) NSArray<Snapshot *> * _Nonnull snapshots;
@property (nonatomic, readonly, strong) Patient * _Nonnull patient;
@property (nonatomic, readonly, copy) NSArray<TwelveLead *> * _Nonnull twelveLeads;
@property (nonatomic, readonly, strong) Defibrillator * _Nonnull defibrillator;
- (nonnull instancetype)initWithCaseDate:(NSDate * _Nonnull)caseDate trends:(NSArray<TrendReport *> * _Nonnull)trends events:(NSArray<Event *> * _Nonnull)events snapshots:(NSArray<Snapshot *> * _Nonnull)snapshots patient:(Patient * _Nonnull)patient twelveLeads:(NSArray<TwelveLead *> * _Nonnull)twelveLeads defibrillator:(Defibrillator * _Nonnull)defibrillator OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol CaseParserDelegate;
@class NSData;

/// CaseParser provides an opportunity to parse existing JSON dictionary or files which has .zol extension.
/// Parsing can be processed the called thread or with using another thread, the result of parsing can be returned as ‘FullCase’ model or throws ZOXError.
/// For using asynchronous parsing provide an implementation of ‘CaseParserDelegate’  and process the result in a callback.
SWIFT_PROTOCOL("_TtP10XSeriesSDK10CaseParser_")
@protocol CaseParser
/// Parses case from JSON dictionary synchronous
/// \param json dictionary of JSON data to parse
///
///
/// throws:
/// exception when JSON can’t be parsed
///
/// returns:
/// parsed FullCase model from dictionary
- (Case * _Nullable)parseCaseFromJson:(NSDictionary<NSString *, id> * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parses case from JSON dictionary asynchronous
/// \param json dictionary of JSON data to parse
///
/// \param delegate delegate for provide parsing result
///
- (void)parseCaseFromJson:(NSDictionary<NSString *, id> * _Nonnull)json delegate:(id <CaseParserDelegate> _Nonnull)delegate;
/// Parses case from *.zol file extension synchronous
/// \param file contained data in file
///
///
/// throws:
/// exception when file can’t be parsed
///
/// returns:
/// parsed FullCase model from file
- (Case * _Nullable)parseZolFileWithFile:(NSData * _Nonnull)file error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parses case from *.zol file extension asynchronous
/// \param file contained data in file
///
/// \param delegate delegate for provide parsing result
///
- (void)parseZolFileWithFile:(NSData * _Nonnull)file delegate:(id <CaseParserDelegate> _Nonnull)delegate;
@end

@class ZOXError;

/// CaseParserDelegate provides the result of work CaseParser
SWIFT_PROTOCOL("_TtP10XSeriesSDK18CaseParserDelegate_")
@protocol CaseParserDelegate
/// Called when case parse successfully
/// \param fullCase parsed case model
///
- (void)onCaseParsedSuccessWithFullCase:(Case * _Nonnull)fullCase;
/// Called when case parse finished with error
/// \param error the error of parsing
///
- (void)onCaseParseErrorWithError:(ZOXError * _Nonnull)error;
@end

typedef SWIFT_ENUM(NSInteger, CaseStatus, open) {
  CaseStatusPast = 0,
  CaseStatusCurrent = 1,
  CaseStatusUnknow = 2,
};


/// RequestDelegate is parent delegate for DeviceApi delegates, provides common rules to passing error
SWIFT_PROTOCOL("_TtP10XSeriesSDK15RequestDelegate_")
@protocol RequestDelegate
/// Called when the request is failed
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device
///
/// \param error the error of retrieving the data
///
- (void)onRequestFailedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId error:(ZOXError * _Nonnull)error;
/// Called when the device has a not default password or provided the password is wrong
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device
///
- (void)onAuthenticationFailedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId;
@end


/// CurrentShapshotDelegate provides the result of ‘getCurrentSnapshot’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK23CurrentSnapshotDelegate_")
@protocol CurrentSnapshotDelegate <RequestDelegate>
/// Called when current snapshot successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides snapshot
///
/// \param snapshot shapshot data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId snapshot:(Snapshot * _Nonnull)snapshot;
@end


/// CurrentTrendDelegate provides the result of ‘getCurrentTrend’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK20CurrentTrendDelegate_")
@protocol CurrentTrendDelegate <RequestDelegate>
/// Called when current trend successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides trend
///
/// \param trend trend data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId trend:(TrendReport * _Nonnull)trend;
@end

/// List of all possible data status.
/// 0 = Valid
/// 1 = Invalid
/// 2 = Underrange
/// 3 = Overrange
typedef SWIFT_ENUM(NSInteger, DataStatus, open) {
  DataStatusValid = 0,
  DataStatusInvalid = 1,
  DataStatusUnderrange = 2,
  DataStatusOverrange = 3,
};


/// Represents an X-Series device.  Used by the ZOLL Writer to store information
/// about the source device that created the records it is writing.
SWIFT_CLASS("_TtC10XSeriesSDK13Defibrillator")
@interface Defibrillator : NSObject
/// The serial number of the device.
@property (nonatomic, readonly, copy) NSString * _Nonnull serialNumber;
/// The unit ID of the device.
@property (nonatomic, readonly, copy) NSString * _Nonnull unitId;
/// The firmware version of the device.  X-Series devices report several firmware versions;
/// we’re only interested in the “PpSwVer” information.
@property (nonatomic, readonly, copy) NSString * _Nonnull softwareVersion;
- (nonnull instancetype)initWithSerialNumber:(NSString * _Nonnull)serialNumber unitId:(NSString * _Nonnull)unitId softwareVersion:(NSString * _Nonnull)softwareVersion OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class XSeriesDevice;
@protocol XCaseCatalogItemDelegate;
@protocol FullCaseDelegate;
@class NSURL;
@protocol DownloadCaseDelegate;
@protocol MidCaseListDelegate;
@protocol TwelveLeadDelegate;
@protocol TrendDelegate;
@protocol SnapshotDelegate;
@protocol VitalSignsDelegate;

/// DeviceApi provides an opportunity to retrieve data from the XSeries device,
/// each request process asynchronously and provide result via delegate.
SWIFT_PROTOCOL("_TtP10XSeriesSDK9DeviceApi_")
@protocol DeviceApi
/// Retrieve XCaseCatalogItem list from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getXCaseCatalogItemWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <XCaseCatalogItemDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieve case from XSeries device
/// \param device XSeriesDevice object
///
/// \param caseId case id
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getCaseWithDevice:(XSeriesDevice * _Nonnull)device caseId:(NSString * _Nonnull)caseId password:(NSString * _Nullable)password delegate:(id <FullCaseDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Downloads case from XSeries device
/// \param device XSeriesDevice object
///
/// \param caseId case id
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)downloadCaseWithDevice:(XSeriesDevice * _Nonnull)device caseId:(NSString * _Nonnull)caseId folder:(NSURL * _Nonnull)folder password:(NSString * _Nullable)password delegate:(id <DownloadCaseDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieves list of TwelveLeads from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getTwelveLeadListWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <MidCaseListDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieves list of TwelveLeads from XSeries device
/// \param device XSeriesDevice object
///
/// \param twelveLeadId twelve lead id
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getTwelveLeadWithDevice:(XSeriesDevice * _Nonnull)device twelveLeadId:(NSString * _Nonnull)twelveLeadId password:(NSString * _Nullable)password delegate:(id <TwelveLeadDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieve list of trends from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getTrendListWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <MidCaseListDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieves trend from XSeries device
/// \param device XSeriesDevice object
///
/// \param trendId trend id
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getTrendWithDevice:(XSeriesDevice * _Nonnull)device trendId:(NSString * _Nonnull)trendId password:(NSString * _Nullable)password delegate:(id <TrendDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieve current trend from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getCurrentTrendWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <CurrentTrendDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieves list of snapshots from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getSnapshotListWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <MidCaseListDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieves snapshot from XSeries device
/// \param device XSeriesDevice object
///
/// \param shapshotId snapshot id
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getSnapshotWithDevice:(XSeriesDevice * _Nonnull)device shapshotId:(NSString * _Nonnull)shapshotId password:(NSString * _Nullable)password delegate:(id <SnapshotDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieves current snapshot from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getCurrentSnapshotWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <CurrentSnapshotDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieve vital signs report from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getCurrentVitalSignsReportWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <VitalSignsDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Cancel request
/// \param requestId request id to cancel
///
- (void)cancelRequestWithRequestId:(NSInteger)requestId;
@end

@protocol DevicesDelegate;

/// DevicesBrowser searches the network for X-Series devices using Bonjour.
SWIFT_PROTOCOL("_TtP10XSeriesSDK14DevicesBrowser_")
@protocol DevicesBrowser
/// Starts discovering X-Series devices in the network.
/// \param delegate delegate to return result
///
- (void)startWithDelegate:(id <DevicesDelegate> _Nonnull)delegate;
/// Stops discovering X-Series devices in the network.
- (void)stop;
@end


/// DevicesDelegate provides the result searching XSeriesDevices via Bonjour, used with ‘DevicesBrowser’
SWIFT_PROTOCOL("_TtP10XSeriesSDK15DevicesDelegate_")
@protocol DevicesDelegate
/// Called when new device found in a local network
/// \param device the device which found in a local network
///
- (void)onDeviceFoundWithDevice:(XSeriesDevice * _Nonnull)device;
/// Called when founded device lost in a local network
/// \param device the device which lost in a local network
///
- (void)onDeviceLostWithDevice:(XSeriesDevice * _Nonnull)device;
/// Called when searching finished with error
/// \param error the error of searching devices
///
- (void)onBrowseErrorWithError:(ZOXError * _Nonnull)error;
@end


/// DownloadCaseDelegate provides the result of work DeviceApi
SWIFT_PROTOCOL("_TtP10XSeriesSDK20DownloadCaseDelegate_")
@protocol DownloadCaseDelegate
/// Called when case successfully downloaded
/// \param requestCode the unique id of downloading request
///
/// \param deviceId the serial number of the device that provide downloaded case
///
/// \param caseId requested case Id
///
/// \param file URL of downloaded file
///
- (void)onDownloadCompletedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId caseId:(NSString * _Nonnull)caseId file:(NSURL * _Nonnull)file;
/// Called when downloading finished with error
/// \param requestCode the unique id of downloading request
///
/// \param deviceId the serial number of the device that failed to download case
///
/// \param caseId requested case Id
///
/// \param error the error of downloading case
///
- (void)onDownloadFailedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId caseId:(NSString * _Nonnull)caseId error:(ZOXError * _Nonnull)error;
/// Authentication failed. (XSeries firmware v02.30 added the ability to change network password.)
/// \param requestCode the unique id of downloading request
///
/// \param deviceId the serial number of device that failed to download case
///
- (void)onAuthenticationFailedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId;
@end

@class NSCoder;
@class UITapGestureRecognizer;
@class UIView;

SWIFT_CLASS("_TtC10XSeriesSDK7ECGView")
@interface ECGView : UIScrollView <UIScrollViewDelegate>
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)handleTap:(UITapGestureRecognizer * _Nullable)recognizer;
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
@end

enum EventType : NSInteger;

/// Root object of XSeries device event, stored base info about event.
SWIFT_CLASS("_TtC10XSeriesSDK5Event")
@interface Event : NSObject
/// Date of event.
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// Type of event.
@property (nonatomic, readonly) enum EventType type;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The type of recorder event on XSeries device
typedef SWIFT_ENUM(NSInteger, EventType, open) {
  EventTypeSyncOn = 0,
  EventTypeSyncOff = 1,
  EventTypeSyncFailure = 2,
  EventTypeNoShokAdvised = 3,
  EventTypeShokAdvised = 4,
  EventTypePacerStart = 5,
  EventTypePacerOff = 6,
  EventTypeShock = 7,
  EventTypeTreatment = 8,
  EventTypeSnapshot = 9,
  EventTypeTwelveLead = 10,
  EventTypeSystemOn = 11,
};


/// RequestDelegate is parent delegate for DeviceApi delegates which provides single info model, provides common rules to passing error
SWIFT_PROTOCOL("_TtP10XSeriesSDK19RequestItemDelegate_")
@protocol RequestItemDelegate
/// Called when the request for item details is failed
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides the item
///
/// \param itemId the id of the item which requested
///
/// \param error the error of retrieving the item
///
- (void)onRequestFailedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId itemId:(NSString * _Nonnull)itemId error:(ZOXError * _Nonnull)error;
/// Called when the device has a not default password or provided the password is wrong
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides item
///
- (void)onAuthenticationFailedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId;
@end


/// FullCaseDelegate provides the result of ‘getCase’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK16FullCaseDelegate_")
@protocol FullCaseDelegate <RequestItemDelegate>
/// Called when full case successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides full case
///
/// \param caseId the id of requested case
///
/// \param fullCase full case data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId caseId:(NSString * _Nonnull)caseId fullCase:(Case * _Nonnull)fullCase;
@end

/// List of all possible genders.
typedef SWIFT_ENUM(NSInteger, Gender, open) {
  GenderMale = 0,
  GenderFemale = 1,
  GenderUnknown = 2,
};

@class TrendData;
enum HeartRateSource : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK9HeartRate")
@interface HeartRate : NSObject
@property (nonatomic, readonly, strong) TrendData * _Nonnull trendData;
@property (nonatomic, readonly) enum HeartRateSource source;
- (nonnull instancetype)initWithTrendData:(TrendData * _Nonnull)trendData source:(enum HeartRateSource)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HeartRateSource, open) {
  HeartRateSourceUnspecified = 0,
  HeartRateSourceECG = 1,
  HeartRateSourceSPO_2 = 2,
  HeartRateSourceIBP_1 = 3,
  HeartRateSourceIBP_2 = 4,
  HeartRateSourceIBP_3 = 5,
  HeartRateSourceNIBP = 6,
};

enum IBPSource : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK9IBPReport")
@interface IBPReport : NSObject
@property (nonatomic, readonly) NSInteger chanNum;
@property (nonatomic, readonly) enum IBPSource sourse;
@property (nonatomic, readonly, strong) TrendData * _Nonnull diastolicBloodPressure;
@property (nonatomic, readonly, strong) TrendData * _Nonnull systolicBloodPressure;
@property (nonatomic, readonly, strong) TrendData * _Nonnull meanArterialPressure;
- (nonnull instancetype)initWithChanNum:(NSInteger)chanNum sourse:(enum IBPSource)sourse diastolicBloodPressure:(TrendData * _Nonnull)diastolicBloodPressure systolicBloodPressure:(TrendData * _Nonnull)systolicBloodPressure meanArterialPressure:(TrendData * _Nonnull)meanArterialPressure OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, IBPSource, open) {
  IBPSourceUnspecified = 0,
  IBPSourceNone = 1,
  IBPSourceABP = 2,
  IBPSourceART = 3,
  IBPSourceAO = 4,
  IBPSourceCVP = 5,
  IBPSourceICP = 6,
  IBPSourceLAP = 7,
  IBPSourceP1 = 8,
  IBPSourceP2 = 9,
  IBPSourceP3 = 10,
  IBPSourcePAP = 11,
  IBPSourceRAP = 12,
  IBPSourceUAP = 13,
  IBPSourceUVP = 14,
  IBPSourceBAP = 15,
  IBPSourceFAP = 16,
};

typedef SWIFT_ENUM(NSInteger, Lead, open) {
  LeadI = 0,
  LeadII = 1,
  LeadIII = 2,
  LeadAVR = 3,
  LeadAVL = 4,
  LeadAVF = 5,
  LeadV1 = 6,
  LeadV2 = 7,
  LeadV3 = 8,
  LeadV4 = 9,
  LeadV5 = 10,
  LeadV6 = 11,
};

enum MidCaseType : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK11MidCaseInfo")
@interface MidCaseInfo : NSObject
@property (nonatomic, readonly) enum MidCaseType type;
@property (nonatomic, readonly, copy) NSDate * _Nonnull rtcTime;
@property (nonatomic, readonly, copy) NSString * _Nonnull caseID;
@property (nonatomic, readonly, copy) NSString * _Nonnull UID;
- (nonnull instancetype)initWithType:(enum MidCaseType)type rtcTime:(NSDate * _Nonnull)rtcTime caseID:(NSString * _Nonnull)caseID UID:(NSString * _Nonnull)UID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// MidCaseListDelegate provides the result of ‘getTwelveLeadList’, ‘getSnapshotList’, ‘getTrendList’ requests
SWIFT_PROTOCOL("_TtP10XSeriesSDK19MidCaseListDelegate_")
@protocol MidCaseListDelegate <RequestDelegate>
/// Called when mid cases successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides twelve lead
///
/// \param midCases mid case data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId midCases:(NSArray<MidCaseInfo *> * _Nonnull)midCases;
@end

typedef SWIFT_ENUM(NSInteger, MidCaseType, open) {
  MidCaseTypeTwelveLead = 0,
  MidCaseTypeTrend = 1,
  MidCaseTypeSnapshot = 2,
};

@class ValueUnitPair;

/// Event of XSeries device event, stored base info about event in ‘Event’ class
/// extends with additional info
SWIFT_CLASS("_TtC10XSeriesSDK15PacerStartEvent")
@interface PacerStartEvent : Event
/// Current of event.
@property (nonatomic, readonly, strong) ValueUnitPair * _Nonnull current;
/// Rate of pacer event.
@property (nonatomic, readonly, strong) ValueUnitPair * _Nonnull rate;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type current:(ValueUnitPair * _Nonnull)current rate:(ValueUnitPair * _Nonnull)rate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type SWIFT_UNAVAILABLE;
@end


/// Represents patient information retrieved from an X-Series.
SWIFT_CLASS("_TtC10XSeriesSDK7Patient")
@interface Patient : NSObject
/// The age of the patient, in integer years.
@property (nonatomic, readonly) NSInteger age;
/// The gender of the patient.
@property (nonatomic, readonly) enum Gender sex;
/// The first name of the patient.
@property (nonatomic, readonly, copy) NSString * _Nullable firstName;
/// The middle name of the patient.
@property (nonatomic, readonly, copy) NSString * _Nullable middleName;
/// The last name of the patient.
@property (nonatomic, readonly, copy) NSString * _Nullable lastName;
/// The patient’s ID.
@property (nonatomic, readonly, copy) NSString * _Nullable patientId;
- (nonnull instancetype)initWithAge:(NSInteger)age sex:(enum Gender)sex firstName:(NSString * _Nullable)firstName middleName:(NSString * _Nullable)middleName lastName:(NSString * _Nullable)lastName patientId:(NSString * _Nullable)patientId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol PatientDemographicDelegate;

/// PatientDemographicApi provides an opportunity to retrieve Patient Demographic data from the XSeries device,
/// each request process asynchronously and provide result via delegate.
SWIFT_PROTOCOL("_TtP10XSeriesSDK21PatientDemographicApi_")
@protocol PatientDemographicApi <DeviceApi>
/// Retrieve patient demographic info from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getPatientDemographicInfoWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <PatientDemographicDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Save patient demographic info to an XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param patient Patient Info Model Object
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)savePatientDemographicInfoWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password patient:(Patient * _Nonnull)patient delegate:(id <PatientDemographicDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
@end

@class PatientDemographicInfo;

/// PatientDemographicDelegate provides the result of ‘getPatientDemographicInfo’ and savePatientDemographicInfo request
SWIFT_PROTOCOL("_TtP10XSeriesSDK26PatientDemographicDelegate_")
@protocol PatientDemographicDelegate <RequestDelegate>
/// Called when Patient Demographic Info successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides trend
///
/// \param patientDemographicInfo PatientDemographicInfo data model
///
- (void)onGetDemographicInfoRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId patientDemographicInfo:(PatientDemographicInfo * _Nonnull)patientDemographicInfo;
/// Called when Patient Demographic Info successfully saved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides trend
///
/// \param patient Patient Info data model
///
- (void)onSaveDemographicInfoRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId patientInfo:(Patient * _Nonnull)patientInfo;
@end


/// Represents patient information retrieved from an X-Series.
SWIFT_CLASS("_TtC10XSeriesSDK22PatientDemographicInfo")
@interface PatientDemographicInfo : NSObject
/// The first name of the patient.
@property (nonatomic, readonly, copy) NSString * _Nullable firstName;
/// The middle name of the patient.
@property (nonatomic, readonly, copy) NSString * _Nullable middleName;
/// The last name of the patient.
@property (nonatomic, readonly, copy) NSString * _Nullable lastName;
/// The age of the patient, in integer years.
@property (nonatomic, readonly) NSInteger age;
/// The gender of the patient.
@property (nonatomic, readonly) enum Gender sex;
/// <ul>
///   <li>
///     The patient’s ID.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nullable patientId;
/// <ul>
///   <li>
///     The unit serial  number.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nullable unitSerialNumber;
/// <ul>
///   <li>
///     The unit ID.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nullable unitId;
- (nonnull instancetype)initWithFirstName:(NSString * _Nullable)firstName middleName:(NSString * _Nullable)middleName lastName:(NSString * _Nullable)lastName age:(NSInteger)age sex:(enum Gender)sex patientId:(NSString * _Nullable)patientId unitSerialNumber:(NSString * _Nullable)unitSerialNumber unitId:(NSString * _Nullable)unitId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TwelveLeadPrintFormat : NSInteger;
@class NSLocale;

/// ReportGenerator provide methods to generate reports in PDF and PNG format for Twelve Leads and Snapshots
SWIFT_PROTOCOL("_TtP10XSeriesSDK15ReportGenerator_")
@protocol ReportGenerator
/// Creates a PDF representation of a 12-lead object, including its ECG waveforms and all associated data.
/// \param twelveLead 12-lead to turn into a PDF.
///
/// \param format format of ECG graphics, supported standart and cabrera
///
/// \param filePath path to saved PDF document with file name and extension
///
/// \param footer text printed at the bottom of the PDF
///
/// \param locale locale to use non defaul translation in report, default ‘en_US’
///
///
/// throws:
/// exception when report cannot be created
- (BOOL)generate12LeadPDFWithTwelveLead:(TwelveLead * _Nonnull)twelveLead format:(enum TwelveLeadPrintFormat)format filePath:(NSURL * _Nonnull)filePath footer:(NSString * _Nonnull)footer locale:(NSLocale * _Nullable)locale error:(NSError * _Nullable * _Nullable)error;
/// Creates a PNG representation of a 12-lead object, including its ECG waveforms and all associated data.
/// \param twelveLead 12-lead to turn into a PNG.
///
/// \param format format of ECG graphics, supported standart and cabrera
///
/// \param filePath path to saved PDF document with file name and extension
///
/// \param footer text printed at the bottom of the PDF
///
/// \param locale locale to use non defaul translation in report, default ‘en_US’
///
///
/// throws:
/// exception when report cannot be created
- (BOOL)generate12LeadPNGWithTwelveLead:(TwelveLead * _Nonnull)twelveLead format:(enum TwelveLeadPrintFormat)format filePath:(NSURL * _Nonnull)filePath footer:(NSString * _Nonnull)footer locale:(NSLocale * _Nullable)locale error:(NSError * _Nullable * _Nullable)error;
/// Creates a PNG representation of a snapshot object, including its ECG waveforms and all associated data.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     twelveLead: 12-lead to turn into a PNG.
///   </li>
///   <li>
///     filePath: path to saved PDF document with file name and extension
///   </li>
///   <li>
///     footer: text printed at the bottom of the PDF
///   </li>
///   <li>
///     locale: locale to use non defaul translation in report, default ‘en_US’
///   </li>
/// </ul>
///
/// throws:
/// exception when report cannot be created
- (BOOL)generateSnapshotPDFWithSnapshot:(Snapshot * _Nonnull)snapshot filePath:(NSURL * _Nonnull)filePath footer:(NSString * _Nonnull)footer locale:(NSLocale * _Nullable)locale error:(NSError * _Nullable * _Nullable)error;
/// Creates a PDF representation of a snapshot object, including its waveforms and all associated data.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     snapshot: snapshot to turn into a PDF.
///   </li>
///   <li>
///     filePath: path to saved PDF document with file name and extension
///   </li>
///   <li>
///     footer: text printed at the bottom of the PDF
///   </li>
///   <li>
///     locale: locale to use non defaul translation in report, default ‘en_US’
///   </li>
/// </ul>
///
/// throws:
/// exception when report cannot be created
- (BOOL)generateSnapshotPNGWithSnapshot:(Snapshot * _Nonnull)snapshot filePath:(NSURL * _Nonnull)filePath footer:(NSString * _Nonnull)footer locale:(NSLocale * _Nullable)locale error:(NSError * _Nullable * _Nullable)error;
@end



enum RespirationSource : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK15RespirationRate")
@interface RespirationRate : NSObject
@property (nonatomic, readonly, strong) TrendData * _Nonnull trendData;
@property (nonatomic, readonly) enum RespirationSource source;
- (nonnull instancetype)initWithTrendData:(TrendData * _Nonnull)trendData source:(enum RespirationSource)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, RespirationSource, open) {
  RespirationSourceUnspecified = 0,
  RespirationSourceCO_2 = 1,
  RespirationSourceImpedence_respiration = 2,
};


/// Event of XSeries device event, stored base info about event in ‘Event’ class
/// extends with additional info
SWIFT_CLASS("_TtC10XSeriesSDK10ShockEvent")
@interface ShockEvent : Event
/// The selected energy level of shosk event.
@property (nonatomic, readonly, strong) ValueUnitPair * _Nonnull energySelected;
/// The delivered energy level of shosk event.
@property (nonatomic, readonly, strong) ValueUnitPair * _Nonnull energyDelivered;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type energySelected:(ValueUnitPair * _Nonnull)energySelected energyDelivered:(ValueUnitPair * _Nonnull)energyDelivered OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type SWIFT_UNAVAILABLE;
@end

enum SnapshotType : NSInteger;
@class Waveform;

SWIFT_CLASS("_TtC10XSeriesSDK8Snapshot")
@interface Snapshot : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull Id;
@property (nonatomic, readonly) enum SnapshotType type;
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
@property (nonatomic, readonly, copy) NSDate * _Nonnull startDate;
@property (nonatomic, readonly, strong) TrendReport * _Nullable trendReport;
@property (nonatomic, readonly, copy) NSArray<Waveform *> * _Nonnull waveForms;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)Id type:(enum SnapshotType)type date:(NSDate * _Nonnull)date startDate:(NSDate * _Nonnull)startDate trendReport:(TrendReport * _Nullable)trendReport waveForms:(NSArray<Waveform *> * _Nonnull)waveForms OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// SnapshotDelegate provides the result of ‘getSnapshot’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK16SnapshotDelegate_")
@protocol SnapshotDelegate <RequestItemDelegate>
/// Called when snapshot successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides snapshot
///
/// \param snapshotId the id of requested snapshot
///
/// \param snapshot snapshot data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId snapshotId:(NSString * _Nonnull)snapshotId shapshot:(Snapshot * _Nonnull)shapshot;
@end


/// Event of XSeries device event, stored base info about event in ‘Event’ class
/// extends with additional info
SWIFT_CLASS("_TtC10XSeriesSDK13SnapshotEvent")
@interface SnapshotEvent : Event
/// The id of snapshot related to this event.
@property (nonatomic, readonly, copy) NSString * _Nonnull snapshotId;
/// The snapshot type related to this event.
@property (nonatomic, readonly) enum SnapshotType snapshotType;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type snapshotId:(NSString * _Nonnull)snapshotId snapshotType:(enum SnapshotType)snapshotType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, SnapshotType, open) {
  SnapshotTypeUnknown = 0,
  SnapshotTypePacer = 1,
  SnapshotTypeDefib = 2,
  SnapshotTypeTreatment = 3,
  SnapshotTypeMonitor = 4,
  SnapshotTypeAlarm = 5,
  SnapshotTypeAedPresenting = 6,
  SnapshotTypeAedCheckPatient = 7,
  SnapshotTypeAedAnalysisResults = 8,
  SnapshotTypeLtaAlarm = 9,
};

enum TemperatureSource : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK11Temperature")
@interface Temperature : NSObject
@property (nonatomic, readonly, strong) TrendData * _Nonnull trendData;
@property (nonatomic, readonly) enum TemperatureSource source;
- (nonnull instancetype)initWithTrendData:(TrendData * _Nonnull)trendData source:(enum TemperatureSource)source OBJC_DESIGNATED_INITIALIZER;
/// Temperature values are stored on the X-Series as ints
/// So to get real temperature value should be divided by 10
///
/// returns:
/// temperature value
- (float)getValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TemperatureSource, open) {
  TemperatureSourceNa = 0,
  TemperatureSourceUnspecified = 1,
  TemperatureSourceNone = 2,
  TemperatureSourceArt = 3,
  TemperatureSourceCore = 4,
  TemperatureSourceCereb = 5,
  TemperatureSourceRect = 6,
  TemperatureSourceSkin = 7,
};


/// Event of XSeries device event, stored base info about event in ‘Event’ class
/// extends with additional info
SWIFT_CLASS("_TtC10XSeriesSDK14TreatmentEvent")
@interface TreatmentEvent : Event
/// The label with name of treatment event.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type label:(NSString * _Nonnull)label OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10XSeriesSDK9TrendData")
@interface TrendData : NSObject
@property (nonatomic, readonly, strong) ValueUnitPair * _Nonnull value;
@property (nonatomic, readonly) enum AlarmStatus alarm;
@property (nonatomic, readonly) enum DataStatus dataStatus;
- (nonnull instancetype)initWithValue:(ValueUnitPair * _Nonnull)value alarm:(enum AlarmStatus)alarm dataStatus:(enum DataStatus)dataStatus OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// TrendDelegate provides the result of ‘getTrend’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK13TrendDelegate_")
@protocol TrendDelegate <RequestItemDelegate>
/// Called when trend successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides trend
///
/// \param trendId the id of requested trend
///
/// \param trend trend data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId trendId:(NSString * _Nonnull)trendId trend:(TrendReport * _Nonnull)trend;
@end

/// List of all possible trend origins.
typedef SWIFT_ENUM(NSInteger, TrendOrigin, open) {
  TrendOriginPERIODIC = 0,
  TrendOriginNIBP = 1,
  TrendOriginSNAPSHOT = 2,
  TrendOriginTWELVELEAD = 3,
};


/// VitalSigns provides the result of ‘getVitalSignsReport’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK10VitalSigns_")
@protocol VitalSigns
/// Get the VitalSignsReport implemented as a wrapper on top of TrendReport
- (TrendReport * _Nonnull)getVitalSignsReport SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents a single trend report retrieved from an X-Series.  A trend report
/// consists of multiple measurements of the patient’s vital signs taken
/// simultaneously.  Only 7 of the measurements are exposed via this class.
SWIFT_CLASS("_TtC10XSeriesSDK11TrendReport")
@interface TrendReport : NSObject <VitalSigns>
/// The date on which the measurements were taken.
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// The patient’s ETCO2.
@property (nonatomic, readonly, strong) TrendData * _Nonnull etco2;
/// The patient’s SPO2.
@property (nonatomic, readonly, strong) TrendData * _Nonnull spo2;
/// The patient’s heart rate.
@property (nonatomic, readonly, strong) HeartRate * _Nonnull heartRate;
/// The patient’s temperature 1.
@property (nonatomic, readonly, strong) Temperature * _Nonnull temperature1;
/// The patient’s temperature 2.
@property (nonatomic, readonly, strong) Temperature * _Nonnull temperature2;
/// The patient’s temperature delta.
@property (nonatomic, readonly, strong) Temperature * _Nonnull temperatureDelta;
/// The patient’s diastolic blood pressure.
@property (nonatomic, readonly, strong) TrendData * _Nonnull diastolicBloodPressure;
/// The patient’s systolic blood pressure.
@property (nonatomic, readonly, strong) TrendData * _Nonnull systolicBloodPressure;
/// The patient’s min arterial blood pressure.
@property (nonatomic, readonly, strong) TrendData * _Nonnull meanArterialPressure;
/// The patient’s respiration rate.
@property (nonatomic, readonly, strong) RespirationRate * _Nonnull respiration;
/// The ipb 1.
@property (nonatomic, readonly, strong) IBPReport * _Nonnull ibp1;
/// The ipb 2.
@property (nonatomic, readonly, strong) IBPReport * _Nonnull ibp2;
/// The ipb 3.
@property (nonatomic, readonly, strong) IBPReport * _Nonnull ibp3;
/// The trend origin.
@property (nonatomic, readonly) enum TrendOrigin trendOrigin;
/// Get VitalSigns Report.
- (TrendReport * _Nonnull)getVitalSignsReport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date etco2:(TrendData * _Nonnull)etco2 spo2:(TrendData * _Nonnull)spo2 heartRate:(HeartRate * _Nonnull)heartRate temperature1:(Temperature * _Nonnull)temperature1 temperature2:(Temperature * _Nonnull)temperature2 temperatureDelta:(Temperature * _Nonnull)temperatureDelta diastolicBloodPressure:(TrendData * _Nonnull)diastolicBloodPressure systolicBloodPressure:(TrendData * _Nonnull)systolicBloodPressure meanArterialPressure:(TrendData * _Nonnull)meanArterialPressure respiration:(RespirationRate * _Nonnull)respiration ibp1:(IBPReport * _Nonnull)ibp1 ibp2:(IBPReport * _Nonnull)ibp2 ibp3:(IBPReport * _Nonnull)ibp3 trendOrigin:(enum TrendOrigin)trendOrigin OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10XSeriesSDK10TwelveLead")
@interface TwelveLead : NSObject
@property (nonatomic, readonly) NSInteger leadCount;
/// The status of this 12-lead.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull leadStatus;
/// The data of this 12-lead.
@property (nonatomic, readonly, copy) NSArray<NSArray<NSNumber *> *> * _Nonnull leadSamples;
/// The unique ID of this 12-lead.
@property (nonatomic, readonly, copy) NSString * _Nonnull twelveLeadId;
/// Amplitude multiplier. The units of measure for the multiplier are given in the Units field.
/// Each waveform data sample must be multiplied by this value to calculate the actual measured voltage (in Nanovolts).
@property (nonatomic, readonly) double amplitude;
/// The date on which the snapshot was taken.
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// Sample rate for the lead data, in Hz. Always 500.
@property (nonatomic, readonly) double sampleRate;
/// The number of samples taken from each lead.
@property (nonatomic, readonly) NSInteger sampleCount;
/// The user-definable ID of the X-Series device that took the snapshot.
@property (nonatomic, readonly, copy) NSString * _Nonnull unitId;
/// The patient hooked up to the X-Series when the snapshot was taken.
@property (nonatomic, readonly, strong) Patient * _Nonnull patient;
/// Twelve lead analysis result
@property (nonatomic, readonly, strong) AnalysisResult * _Nullable analysisResult;
/// The trend report snapshotted with the 12-lead data.
@property (nonatomic, readonly, strong) TrendReport * _Nullable trendReport;
- (nonnull instancetype)initWithLeadStatus:(NSArray<NSNumber *> * _Nonnull)leadStatus leadSamples:(NSArray<NSArray<NSNumber *> *> * _Nonnull)leadSamples twelveLeadId:(NSString * _Nonnull)twelveLeadId amplitude:(double)amplitude date:(NSDate * _Nonnull)date sampleRate:(double)sampleRate sampleCount:(NSInteger)sampleCount unitId:(NSString * _Nonnull)unitId patient:(Patient * _Nonnull)patient analysisResult:(AnalysisResult * _Nullable)analysisResult trendReport:(TrendReport * _Nullable)trendReport OBJC_DESIGNATED_INITIALIZER;
/// The length, in seconds, of the snapshot.
///
/// returns:
/// duration in seconds.
- (float)totalDurationInSeconds SWIFT_WARN_UNUSED_RESULT;
/// Retrieves raw sample value from the specified lead.
/// \param lead the lead to examine.
///
/// \param index the index of the sample to retrieve.
///
///
/// returns:
/// raw sample value.
- (NSInteger)getRawSampleFromLeadWithLead:(enum Lead)lead index:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the specified sample from the specified lead in millivolts.
/// \param lead the lead to examine.
///
/// \param index the index of the sample to retrieve.
///
///
/// returns:
/// the sample value in mV.
- (float)getSampleFromLeadWithLead:(enum Lead)lead index:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Multiplier used to convert from the normalised lead samples back to mV.
///
/// returns:
/// multiplier value
- (double)getMultiplier SWIFT_WARN_UNUSED_RESULT;
/// Determines whether or not the requested lead and sample pair contains a valid
/// reading.  Invalid readings can be produced by malfunctioning leads, etc.
/// \param lead the lead to examine.
///
/// \param index the index of the sample to verify
///
///
/// returns:
/// true is sample is valid; false if not
- (BOOL)isValidSampleFromLeadWithLead:(enum Lead)lead index:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Generates empty analysis result
- (AnalysisResult * _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// TwelveLeadDelegate provides the result of ‘getTwelveLead’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK18TwelveLeadDelegate_")
@protocol TwelveLeadDelegate <RequestItemDelegate>
/// Called when twelve lead successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides twelve lead
///
/// \param twelveLeadId the id of requested twelve lead
///
/// \param twelveLead twelve lead data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId twelveLeadId:(NSString * _Nonnull)twelveLeadId twelveLead:(TwelveLead * _Nonnull)twelveLead;
@end


/// Event of XSeries device event, stored base info about event in ‘Event’ class
/// extends with additional info
SWIFT_CLASS("_TtC10XSeriesSDK15TwelveLeadEvent")
@interface TwelveLeadEvent : Event
/// The id of twelve lead related to this event.
@property (nonatomic, readonly, copy) NSString * _Nonnull twelveLeadId;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type twelveLeadId:(NSString * _Nonnull)twelveLeadId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, TwelveLeadPrintFormat, open) {
  TwelveLeadPrintFormatStandart = 0,
  TwelveLeadPrintFormatCabrera = 1,
};

typedef SWIFT_ENUM(NSInteger, Unit, open) {
  UnitUndefined = 0,
  UnitNone = 1,
  UnitKpa = 2,
  UnitMmhg = 3,
  UnitC = 4,
  UnitF = 5,
  UnitPercent = 6,
  UnitBpmBeats = 7,
  UnitBpmBreaths = 8,
  UnitNanovolts = 9,
  UnitMicrovolts = 10,
  UnitMillivolts = 11,
  UnitVolts = 12,
  UnitPpm = 13,
  UnitPacerPerMin = 14,
  UnitRpm = 15,
  UnitMah = 16,
  UnitMa = 17,
  UnitMOm = 18,
  UnitG_dl = 19,
  UnitMmo_l = 20,
  UnitMl_dl = 21,
  UnitJ = 22,
};


/// Represents a single value retrieved from an X-Series’ trend report.
SWIFT_CLASS("_TtC10XSeriesSDK13ValueUnitPair")
@interface ValueUnitPair : NSObject
/// The value of the trend measurement.
@property (nonatomic, readonly) float value;
/// The value’s units.
@property (nonatomic, readonly) enum Unit units;
@property (nonatomic, readonly) BOOL isValid;
- (nonnull instancetype)initWithValue:(float)value units:(enum Unit)units isValid:(BOOL)isValid OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class VitalSignsReport;

/// VitalSignsDelegate provides the result of ‘getVitalSignsReport’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK18VitalSignsDelegate_")
@protocol VitalSignsDelegate <RequestDelegate>
/// Called when current numeric successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides trend
///
/// \param vitalSignsReport VitalSignReport data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId vitalSignsReport:(VitalSignsReport * _Nonnull)vitalSignsReport;
@end


/// Represents  vital signs report retrieved from an X-Series.  A vital signs report
/// consists of multiple measurements of the patient’s vital signs taken
/// simultaneously.
SWIFT_CLASS("_TtC10XSeriesSDK16VitalSignsReport")
@interface VitalSignsReport : NSObject
/// The date on which the measurements were taken.
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// The vital signs.
@property (nonatomic, readonly, strong) id <VitalSigns> _Nullable vitalSigns;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date vitalSigns:(id <VitalSigns> _Nullable)vitalSigns OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum WaveformType : NSInteger;
enum WaveformSource : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK8Waveform")
@interface Waveform : NSObject
@property (nonatomic, readonly, copy) NSDate * _Nonnull startTime;
@property (nonatomic, readonly, copy) NSDate * _Nonnull endTime;
@property (nonatomic, readonly) enum WaveformType type;
@property (nonatomic, readonly) enum WaveformSource source;
@property (nonatomic, readonly) enum Unit units;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull samples;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull status;
@property (nonatomic, readonly) float multiplier;
- (nonnull instancetype)initWithStartTime:(NSDate * _Nonnull)startTime endTime:(NSDate * _Nonnull)endTime type:(enum WaveformType)type source:(enum WaveformSource)source units:(enum Unit)units samples:(NSArray<NSNumber *> * _Nonnull)samples multiplier:(float)multiplier status:(NSArray<NSNumber *> * _Nonnull)status OBJC_DESIGNATED_INITIALIZER;
/// Calculates waveform duration in milliseconds
///
/// returns:
/// duration in milliseconds
- (NSTimeInterval)getDuration SWIFT_WARN_UNUSED_RESULT;
- (float)getSamplesWithPosition:(NSInteger)position SWIFT_WARN_UNUSED_RESULT;
/// Determines whether or not the requested sample contains a valid
/// reading. Invalid readings can be produced by malfunctioning leads, etc.
/// \param index the index of the sample to verify
///
///
/// returns:
/// true is sample is valid; false if not
- (BOOL)isValidSampleWithIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, WaveformSource, open) {
  WaveformSourceUnknown = 0,
  WaveformSourceUnspecified = 1,
  WaveformSourceNone = 2,
  WaveformSourceAbp = 3,
  WaveformSourceArt = 4,
  WaveformSourceAo = 5,
  WaveformSourceCvp = 6,
  WaveformSourceIcp = 7,
  WaveformSourceLap = 8,
  WaveformSourceP1 = 9,
  WaveformSourceP2 = 10,
  WaveformSourceP3 = 11,
  WaveformSourcePap = 12,
  WaveformSourceRap = 13,
  WaveformSourceUap = 14,
  WaveformSourceUvp = 15,
  WaveformSourceBap = 16,
  WaveformSourceFap = 17,
};

typedef SWIFT_ENUM(NSInteger, WaveformType, open) {
  WaveformTypeUnknown = 0,
  WaveformTypePads = 1,
  WaveformTypeLeadI = 2,
  WaveformTypeLeadII = 3,
  WaveformTypeLeadIII = 4,
  WaveformTypeLeadAvr = 5,
  WaveformTypeLeadAvl = 6,
  WaveformTypeLeadAvf = 7,
  WaveformTypeLeadV5LeadCable = 8,
  WaveformTypeLeadV1 = 9,
  WaveformTypeLeadV2 = 10,
  WaveformTypeLeadV3 = 11,
  WaveformTypeLeadV4 = 12,
  WaveformTypeLeadV5 = 13,
  WaveformTypeLeadV6 = 14,
  WaveformTypeCo2 = 15,
  WaveformTypeSpo2 = 16,
  WaveformTypeIbp1 = 17,
  WaveformTypeIbp2 = 18,
  WaveformTypeIbp3 = 19,
  WaveformTypeFilteredEcg = 20,
  WaveformTypeCo2Kpa = 21,
  WaveformTypeCo2Percent = 22,
  WaveformTypeIbp1Kpa = 23,
  WaveformTypeIbp2Kpa = 24,
  WaveformTypeIbp3Kpa = 25,
};


SWIFT_CLASS("_TtC10XSeriesSDK12WaveformView")
@interface WaveformView : UIScrollView <UIScrollViewDelegate>
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)handleTap:(UITapGestureRecognizer * _Nullable)recognizer;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
@end


/// Represents a case summary retrieved from an X-Series.
SWIFT_CLASS("_TtC10XSeriesSDK16XCaseCatalogItem")
@interface XCaseCatalogItem : NSObject
/// The status of the case.
@property (nonatomic, readonly) enum CaseStatus status;
/// The time on which the case was uploaded.
@property (nonatomic, readonly, copy) NSDate * _Nullable uploadTime;
/// The number of 12 leads taken during the case.
@property (nonatomic, readonly) NSInteger numberOf12Leads;
/// The number of shocks administered during the case.
@property (nonatomic, readonly) NSInteger numberOfShocks;
/// The time on which the case began.
@property (nonatomic, readonly, copy) NSDate * _Nullable startTime;
/// The time on which the case ended.
@property (nonatomic, readonly, copy) NSDate * _Nullable endTime;
/// The ID of the case.
@property (nonatomic, readonly, copy) NSString * _Nonnull caseId;
/// Indicates whether or not audio is available in the case.
@property (nonatomic, readonly) BOOL audioAvailable;
@property (nonatomic, strong) NSNumber * _Nullable _duration;
- (nonnull instancetype)initWithStatus:(enum CaseStatus)status uploadTime:(NSDate * _Nullable)uploadTime numberOf12Leads:(NSInteger)numberOf12Leads numberOfShocks:(NSInteger)numberOfShocks startTime:(NSDate * _Nullable)startTime endTime:(NSDate * _Nullable)endTime caseId:(NSString * _Nonnull)caseId audioAvailable:(BOOL)audioAvailable duration:(NSNumber * _Nullable)duration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// CaseListDelegate provides the result of ‘getCaseList’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK24XCaseCatalogItemDelegate_")
@protocol XCaseCatalogItemDelegate <RequestDelegate>
/// Called when case list successfully retrieved
/// \param requestCode the unique id of downloading request
///
/// \param deviceId the serial number of the device that provides case list
///
/// \param cases array of retreived cases
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId cases:(NSArray<XCaseCatalogItem *> * _Nonnull)cases;
@end


SWIFT_CLASS("_TtC10XSeriesSDK13XSeriesDevice")
@interface XSeriesDevice : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull serialNumber;
@property (nonatomic, readonly, copy) NSString * _Nonnull ipAdress;
- (nonnull instancetype)initWithSerialNumber:(NSString * _Nonnull)serialNumber ipAdress:(NSString * _Nonnull)ipAdress OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ZOXErrorType : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK8ZOXError")
@interface ZOXError : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull errorMessage;
@property (nonatomic, readonly) enum ZOXErrorType errorType;
- (nonnull instancetype)initWithType:(enum ZOXErrorType)type message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ZOXErrorType, open) {
  ZOXErrorTypeUndefined = 0,
/// Looking the ZOXSeries device in local network with Bonjour services can’t started, check your network setting.
  ZOXErrorTypeDeviceDiscovering = 1,
/// ZOXSeries device founded in local network, but can’t be resolved.
  ZOXErrorTypeDeviceDiscoveryResolve = 2,
/// The answer from ZOXSeries is broken or can’t be parsed.
  ZOXErrorTypeResponseParse = 3,
/// The answer from ZOXSeries is broken or can’t be parsed.
  ZOXErrorTypeJsonParse = 4,
/// The request failed with network error, please try again later.
  ZOXErrorTypeNetwork = 5,
/// Not enough free space for saving json case file.
  ZOXErrorTypeNotEnoughtFreeSpace = 6,
/// Error during the saving file to provided folder.
  ZOXErrorTypeFileSaving = 7,
/// Error during the cration PNG image in Graphic Context
  ZOXErrorTypeImageCreate = 8,
/// Provided file is null or can’t found on disk.
  ZOXErrorTypeFileNotFound = 9,
/// Provided file has unsupported format
  ZOXErrorTypeUnsuportedFormat = 10,
/// Provided JSON is not ZOLL json
  ZOXErrorTypeInvalidSchema = 11,
/// Provided wrong cradencials
  ZOXErrorTypeInvalidCredentials = 12,
/// Provided invalid character
  ZOXErrorTypeInvalidCharacter = 13,
};


SWIFT_CLASS("_TtC10XSeriesSDK9ZOXSeries")
@interface ZOXSeries : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) ZOXSeries * _Nonnull shared;)
+ (ZOXSeries * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(ZOXSeries * _Nonnull)value;
/// DeviceBrowser implementation
@property (nonatomic, readonly, strong) id <DeviceApi> _Nonnull deviceBrowser;
/// DeviceApi implementation
@property (nonatomic, readonly, strong) id <DevicesBrowser> _Nonnull xSeriesBrowser;
/// CaseParser implementation
@property (nonatomic, readonly, strong) id <CaseParser> _Nonnull caseParser;
/// ReportGenerator implementation
@property (nonatomic, readonly, strong) id <ReportGenerator> _Nonnull reportGenerator;
/// About implementation
/// Exposes a version property that returns SDK version
@property (nonatomic, readonly, strong) About * _Nonnull about;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef XSERIESSDK_SWIFT_H
#define XSERIESSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="XSeriesSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

SWIFT_CLASS("_TtC10XSeriesSDK5About")
@interface About : NSObject
- (NSString * _Nonnull)Version SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Alarm status
/// For parameters that support alarms, indicates whether the parameter is alarming.
/// Present for the following parameters: Etco2, Fico2, NIBP (Sys/Dia/Map),
/// IBP (Sys/Dia/Map), Spo2, SpCo, SpMet, SpHb, SpOC, PI, PVI, Resp, Hr, Temp (all channels).
/// 0 = Not Alarming
/// 1 = Alarming
typedef SWIFT_ENUM(NSInteger, AlarmStatus, open) {
  AlarmStatusNot_alarming = 0,
  AlarmStatusAlarming = 1,
};

@class NSNumber;
@class NSArray;

/// Represents Analysis result for twelve lead
SWIFT_CLASS("_TtC10XSeriesSDK14AnalysisResult")
@interface AnalysisResult : NSObject
@property (nonatomic, strong) NSNumber * _Nullable _heartRate;
@property (nonatomic, strong) NSNumber * _Nullable _prInterval;
@property (nonatomic, strong) NSNumber * _Nullable _qtInterval;
@property (nonatomic, strong) NSNumber * _Nullable _correctedQTInterval;
@property (nonatomic, strong) NSNumber * _Nullable _qrsDuration;
@property (nonatomic, strong) NSNumber * _Nullable _pAxis;
@property (nonatomic, strong) NSNumber * _Nullable _qrsAxis;
@property (nonatomic, strong) NSNumber * _Nullable _tAxis;
@property (nonatomic, strong) NSArray * _Nonnull _stjValues;
- (nonnull instancetype)initWithHeartRate:(NSNumber * _Nullable)heartRate prInterval:(NSNumber * _Nullable)prInterval qtInterval:(NSNumber * _Nullable)qtInterval correctedQTInterval:(NSNumber * _Nullable)correctedQTInterval qrsDuration:(NSNumber * _Nullable)qrsDuration pAxis:(NSNumber * _Nullable)pAxis qrsAxis:(NSNumber * _Nullable)qrsAxis tAxis:(NSNumber * _Nullable)tAxis statements:(NSArray<NSString *> * _Nonnull)statements stjValues:(NSArray<NSNumber *> * _Nonnull)stjValues OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSDate;
@class TrendReport;
@class Event;
@class Snapshot;
@class Patient;
@class TwelveLead;
@class Defibrillator;

SWIFT_CLASS("_TtC10XSeriesSDK4Case")
@interface Case : NSObject
@property (nonatomic, readonly, copy) NSDate * _Nonnull caseDate;
@property (nonatomic, readonly, copy) NSArray<TrendReport *> * _Nonnull trends;
@property (nonatomic, readonly, copy) NSArray<Event *> * _Nonnull events;
@property (nonatomic, readonly, copy) NSArray<Snapshot *> * _Nonnull snapshots;
@property (nonatomic, readonly, strong) Patient * _Nonnull patient;
@property (nonatomic, readonly, copy) NSArray<TwelveLead *> * _Nonnull twelveLeads;
@property (nonatomic, readonly, strong) Defibrillator * _Nonnull defibrillator;
- (nonnull instancetype)initWithCaseDate:(NSDate * _Nonnull)caseDate trends:(NSArray<TrendReport *> * _Nonnull)trends events:(NSArray<Event *> * _Nonnull)events snapshots:(NSArray<Snapshot *> * _Nonnull)snapshots patient:(Patient * _Nonnull)patient twelveLeads:(NSArray<TwelveLead *> * _Nonnull)twelveLeads defibrillator:(Defibrillator * _Nonnull)defibrillator OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol CaseParserDelegate;
@class NSData;

/// CaseParser provides an opportunity to parse existing JSON dictionary or files which has .zol extension.
/// Parsing can be processed the called thread or with using another thread, the result of parsing can be returned as ‘FullCase’ model or throws ZOXError.
/// For using asynchronous parsing provide an implementation of ‘CaseParserDelegate’  and process the result in a callback.
SWIFT_PROTOCOL("_TtP10XSeriesSDK10CaseParser_")
@protocol CaseParser
/// Parses case from JSON dictionary synchronous
/// \param json dictionary of JSON data to parse
///
///
/// throws:
/// exception when JSON can’t be parsed
///
/// returns:
/// parsed FullCase model from dictionary
- (Case * _Nullable)parseCaseFromJson:(NSDictionary<NSString *, id> * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parses case from JSON dictionary asynchronous
/// \param json dictionary of JSON data to parse
///
/// \param delegate delegate for provide parsing result
///
- (void)parseCaseFromJson:(NSDictionary<NSString *, id> * _Nonnull)json delegate:(id <CaseParserDelegate> _Nonnull)delegate;
/// Parses case from *.zol file extension synchronous
/// \param file contained data in file
///
///
/// throws:
/// exception when file can’t be parsed
///
/// returns:
/// parsed FullCase model from file
- (Case * _Nullable)parseZolFileWithFile:(NSData * _Nonnull)file error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parses case from *.zol file extension asynchronous
/// \param file contained data in file
///
/// \param delegate delegate for provide parsing result
///
- (void)parseZolFileWithFile:(NSData * _Nonnull)file delegate:(id <CaseParserDelegate> _Nonnull)delegate;
@end

@class ZOXError;

/// CaseParserDelegate provides the result of work CaseParser
SWIFT_PROTOCOL("_TtP10XSeriesSDK18CaseParserDelegate_")
@protocol CaseParserDelegate
/// Called when case parse successfully
/// \param fullCase parsed case model
///
- (void)onCaseParsedSuccessWithFullCase:(Case * _Nonnull)fullCase;
/// Called when case parse finished with error
/// \param error the error of parsing
///
- (void)onCaseParseErrorWithError:(ZOXError * _Nonnull)error;
@end

typedef SWIFT_ENUM(NSInteger, CaseStatus, open) {
  CaseStatusPast = 0,
  CaseStatusCurrent = 1,
  CaseStatusUnknow = 2,
};


/// RequestDelegate is parent delegate for DeviceApi delegates, provides common rules to passing error
SWIFT_PROTOCOL("_TtP10XSeriesSDK15RequestDelegate_")
@protocol RequestDelegate
/// Called when the request is failed
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device
///
/// \param error the error of retrieving the data
///
- (void)onRequestFailedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId error:(ZOXError * _Nonnull)error;
/// Called when the device has a not default password or provided the password is wrong
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device
///
- (void)onAuthenticationFailedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId;
@end


/// CurrentShapshotDelegate provides the result of ‘getCurrentSnapshot’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK23CurrentSnapshotDelegate_")
@protocol CurrentSnapshotDelegate <RequestDelegate>
/// Called when current snapshot successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides snapshot
///
/// \param snapshot shapshot data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId snapshot:(Snapshot * _Nonnull)snapshot;
@end


/// CurrentTrendDelegate provides the result of ‘getCurrentTrend’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK20CurrentTrendDelegate_")
@protocol CurrentTrendDelegate <RequestDelegate>
/// Called when current trend successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides trend
///
/// \param trend trend data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId trend:(TrendReport * _Nonnull)trend;
@end

/// List of all possible data status.
/// 0 = Valid
/// 1 = Invalid
/// 2 = Underrange
/// 3 = Overrange
typedef SWIFT_ENUM(NSInteger, DataStatus, open) {
  DataStatusValid = 0,
  DataStatusInvalid = 1,
  DataStatusUnderrange = 2,
  DataStatusOverrange = 3,
};


/// Represents an X-Series device.  Used by the ZOLL Writer to store information
/// about the source device that created the records it is writing.
SWIFT_CLASS("_TtC10XSeriesSDK13Defibrillator")
@interface Defibrillator : NSObject
/// The serial number of the device.
@property (nonatomic, readonly, copy) NSString * _Nonnull serialNumber;
/// The unit ID of the device.
@property (nonatomic, readonly, copy) NSString * _Nonnull unitId;
/// The firmware version of the device.  X-Series devices report several firmware versions;
/// we’re only interested in the “PpSwVer” information.
@property (nonatomic, readonly, copy) NSString * _Nonnull softwareVersion;
- (nonnull instancetype)initWithSerialNumber:(NSString * _Nonnull)serialNumber unitId:(NSString * _Nonnull)unitId softwareVersion:(NSString * _Nonnull)softwareVersion OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class XSeriesDevice;
@protocol XCaseCatalogItemDelegate;
@protocol FullCaseDelegate;
@class NSURL;
@protocol DownloadCaseDelegate;
@protocol MidCaseListDelegate;
@protocol TwelveLeadDelegate;
@protocol TrendDelegate;
@protocol SnapshotDelegate;
@protocol VitalSignsDelegate;

/// DeviceApi provides an opportunity to retrieve data from the XSeries device,
/// each request process asynchronously and provide result via delegate.
SWIFT_PROTOCOL("_TtP10XSeriesSDK9DeviceApi_")
@protocol DeviceApi
/// Retrieve XCaseCatalogItem list from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getXCaseCatalogItemWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <XCaseCatalogItemDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieve case from XSeries device
/// \param device XSeriesDevice object
///
/// \param caseId case id
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getCaseWithDevice:(XSeriesDevice * _Nonnull)device caseId:(NSString * _Nonnull)caseId password:(NSString * _Nullable)password delegate:(id <FullCaseDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Downloads case from XSeries device
/// \param device XSeriesDevice object
///
/// \param caseId case id
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)downloadCaseWithDevice:(XSeriesDevice * _Nonnull)device caseId:(NSString * _Nonnull)caseId folder:(NSURL * _Nonnull)folder password:(NSString * _Nullable)password delegate:(id <DownloadCaseDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieves list of TwelveLeads from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getTwelveLeadListWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <MidCaseListDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieves list of TwelveLeads from XSeries device
/// \param device XSeriesDevice object
///
/// \param twelveLeadId twelve lead id
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getTwelveLeadWithDevice:(XSeriesDevice * _Nonnull)device twelveLeadId:(NSString * _Nonnull)twelveLeadId password:(NSString * _Nullable)password delegate:(id <TwelveLeadDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieve list of trends from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getTrendListWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <MidCaseListDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieves trend from XSeries device
/// \param device XSeriesDevice object
///
/// \param trendId trend id
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getTrendWithDevice:(XSeriesDevice * _Nonnull)device trendId:(NSString * _Nonnull)trendId password:(NSString * _Nullable)password delegate:(id <TrendDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieve current trend from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getCurrentTrendWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <CurrentTrendDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieves list of snapshots from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getSnapshotListWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <MidCaseListDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieves snapshot from XSeries device
/// \param device XSeriesDevice object
///
/// \param shapshotId snapshot id
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getSnapshotWithDevice:(XSeriesDevice * _Nonnull)device shapshotId:(NSString * _Nonnull)shapshotId password:(NSString * _Nullable)password delegate:(id <SnapshotDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieves current snapshot from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getCurrentSnapshotWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <CurrentSnapshotDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieve vital signs report from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getCurrentVitalSignsReportWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <VitalSignsDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Cancel request
/// \param requestId request id to cancel
///
- (void)cancelRequestWithRequestId:(NSInteger)requestId;
@end

@protocol DevicesDelegate;

/// DevicesBrowser searches the network for X-Series devices using Bonjour.
SWIFT_PROTOCOL("_TtP10XSeriesSDK14DevicesBrowser_")
@protocol DevicesBrowser
/// Starts discovering X-Series devices in the network.
/// \param delegate delegate to return result
///
- (void)startWithDelegate:(id <DevicesDelegate> _Nonnull)delegate;
/// Stops discovering X-Series devices in the network.
- (void)stop;
@end


/// DevicesDelegate provides the result searching XSeriesDevices via Bonjour, used with ‘DevicesBrowser’
SWIFT_PROTOCOL("_TtP10XSeriesSDK15DevicesDelegate_")
@protocol DevicesDelegate
/// Called when new device found in a local network
/// \param device the device which found in a local network
///
- (void)onDeviceFoundWithDevice:(XSeriesDevice * _Nonnull)device;
/// Called when founded device lost in a local network
/// \param device the device which lost in a local network
///
- (void)onDeviceLostWithDevice:(XSeriesDevice * _Nonnull)device;
/// Called when searching finished with error
/// \param error the error of searching devices
///
- (void)onBrowseErrorWithError:(ZOXError * _Nonnull)error;
@end


/// DownloadCaseDelegate provides the result of work DeviceApi
SWIFT_PROTOCOL("_TtP10XSeriesSDK20DownloadCaseDelegate_")
@protocol DownloadCaseDelegate
/// Called when case successfully downloaded
/// \param requestCode the unique id of downloading request
///
/// \param deviceId the serial number of the device that provide downloaded case
///
/// \param caseId requested case Id
///
/// \param file URL of downloaded file
///
- (void)onDownloadCompletedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId caseId:(NSString * _Nonnull)caseId file:(NSURL * _Nonnull)file;
/// Called when downloading finished with error
/// \param requestCode the unique id of downloading request
///
/// \param deviceId the serial number of the device that failed to download case
///
/// \param caseId requested case Id
///
/// \param error the error of downloading case
///
- (void)onDownloadFailedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId caseId:(NSString * _Nonnull)caseId error:(ZOXError * _Nonnull)error;
/// Authentication failed. (XSeries firmware v02.30 added the ability to change network password.)
/// \param requestCode the unique id of downloading request
///
/// \param deviceId the serial number of device that failed to download case
///
- (void)onAuthenticationFailedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId;
@end

@class NSCoder;
@class UITapGestureRecognizer;
@class UIView;

SWIFT_CLASS("_TtC10XSeriesSDK7ECGView")
@interface ECGView : UIScrollView <UIScrollViewDelegate>
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)handleTap:(UITapGestureRecognizer * _Nullable)recognizer;
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
@end

enum EventType : NSInteger;

/// Root object of XSeries device event, stored base info about event.
SWIFT_CLASS("_TtC10XSeriesSDK5Event")
@interface Event : NSObject
/// Date of event.
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// Type of event.
@property (nonatomic, readonly) enum EventType type;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The type of recorder event on XSeries device
typedef SWIFT_ENUM(NSInteger, EventType, open) {
  EventTypeSyncOn = 0,
  EventTypeSyncOff = 1,
  EventTypeSyncFailure = 2,
  EventTypeNoShokAdvised = 3,
  EventTypeShokAdvised = 4,
  EventTypePacerStart = 5,
  EventTypePacerOff = 6,
  EventTypeShock = 7,
  EventTypeTreatment = 8,
  EventTypeSnapshot = 9,
  EventTypeTwelveLead = 10,
  EventTypeSystemOn = 11,
};


/// RequestDelegate is parent delegate for DeviceApi delegates which provides single info model, provides common rules to passing error
SWIFT_PROTOCOL("_TtP10XSeriesSDK19RequestItemDelegate_")
@protocol RequestItemDelegate
/// Called when the request for item details is failed
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides the item
///
/// \param itemId the id of the item which requested
///
/// \param error the error of retrieving the item
///
- (void)onRequestFailedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId itemId:(NSString * _Nonnull)itemId error:(ZOXError * _Nonnull)error;
/// Called when the device has a not default password or provided the password is wrong
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides item
///
- (void)onAuthenticationFailedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId;
@end


/// FullCaseDelegate provides the result of ‘getCase’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK16FullCaseDelegate_")
@protocol FullCaseDelegate <RequestItemDelegate>
/// Called when full case successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides full case
///
/// \param caseId the id of requested case
///
/// \param fullCase full case data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId caseId:(NSString * _Nonnull)caseId fullCase:(Case * _Nonnull)fullCase;
@end

/// List of all possible genders.
typedef SWIFT_ENUM(NSInteger, Gender, open) {
  GenderMale = 0,
  GenderFemale = 1,
  GenderUnknown = 2,
};

@class TrendData;
enum HeartRateSource : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK9HeartRate")
@interface HeartRate : NSObject
@property (nonatomic, readonly, strong) TrendData * _Nonnull trendData;
@property (nonatomic, readonly) enum HeartRateSource source;
- (nonnull instancetype)initWithTrendData:(TrendData * _Nonnull)trendData source:(enum HeartRateSource)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HeartRateSource, open) {
  HeartRateSourceUnspecified = 0,
  HeartRateSourceECG = 1,
  HeartRateSourceSPO_2 = 2,
  HeartRateSourceIBP_1 = 3,
  HeartRateSourceIBP_2 = 4,
  HeartRateSourceIBP_3 = 5,
  HeartRateSourceNIBP = 6,
};

enum IBPSource : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK9IBPReport")
@interface IBPReport : NSObject
@property (nonatomic, readonly) NSInteger chanNum;
@property (nonatomic, readonly) enum IBPSource sourse;
@property (nonatomic, readonly, strong) TrendData * _Nonnull diastolicBloodPressure;
@property (nonatomic, readonly, strong) TrendData * _Nonnull systolicBloodPressure;
@property (nonatomic, readonly, strong) TrendData * _Nonnull meanArterialPressure;
- (nonnull instancetype)initWithChanNum:(NSInteger)chanNum sourse:(enum IBPSource)sourse diastolicBloodPressure:(TrendData * _Nonnull)diastolicBloodPressure systolicBloodPressure:(TrendData * _Nonnull)systolicBloodPressure meanArterialPressure:(TrendData * _Nonnull)meanArterialPressure OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, IBPSource, open) {
  IBPSourceUnspecified = 0,
  IBPSourceNone = 1,
  IBPSourceABP = 2,
  IBPSourceART = 3,
  IBPSourceAO = 4,
  IBPSourceCVP = 5,
  IBPSourceICP = 6,
  IBPSourceLAP = 7,
  IBPSourceP1 = 8,
  IBPSourceP2 = 9,
  IBPSourceP3 = 10,
  IBPSourcePAP = 11,
  IBPSourceRAP = 12,
  IBPSourceUAP = 13,
  IBPSourceUVP = 14,
  IBPSourceBAP = 15,
  IBPSourceFAP = 16,
};

typedef SWIFT_ENUM(NSInteger, Lead, open) {
  LeadI = 0,
  LeadII = 1,
  LeadIII = 2,
  LeadAVR = 3,
  LeadAVL = 4,
  LeadAVF = 5,
  LeadV1 = 6,
  LeadV2 = 7,
  LeadV3 = 8,
  LeadV4 = 9,
  LeadV5 = 10,
  LeadV6 = 11,
};

enum MidCaseType : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK11MidCaseInfo")
@interface MidCaseInfo : NSObject
@property (nonatomic, readonly) enum MidCaseType type;
@property (nonatomic, readonly, copy) NSDate * _Nonnull rtcTime;
@property (nonatomic, readonly, copy) NSString * _Nonnull caseID;
@property (nonatomic, readonly, copy) NSString * _Nonnull UID;
- (nonnull instancetype)initWithType:(enum MidCaseType)type rtcTime:(NSDate * _Nonnull)rtcTime caseID:(NSString * _Nonnull)caseID UID:(NSString * _Nonnull)UID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// MidCaseListDelegate provides the result of ‘getTwelveLeadList’, ‘getSnapshotList’, ‘getTrendList’ requests
SWIFT_PROTOCOL("_TtP10XSeriesSDK19MidCaseListDelegate_")
@protocol MidCaseListDelegate <RequestDelegate>
/// Called when mid cases successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides twelve lead
///
/// \param midCases mid case data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId midCases:(NSArray<MidCaseInfo *> * _Nonnull)midCases;
@end

typedef SWIFT_ENUM(NSInteger, MidCaseType, open) {
  MidCaseTypeTwelveLead = 0,
  MidCaseTypeTrend = 1,
  MidCaseTypeSnapshot = 2,
};

@class ValueUnitPair;

/// Event of XSeries device event, stored base info about event in ‘Event’ class
/// extends with additional info
SWIFT_CLASS("_TtC10XSeriesSDK15PacerStartEvent")
@interface PacerStartEvent : Event
/// Current of event.
@property (nonatomic, readonly, strong) ValueUnitPair * _Nonnull current;
/// Rate of pacer event.
@property (nonatomic, readonly, strong) ValueUnitPair * _Nonnull rate;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type current:(ValueUnitPair * _Nonnull)current rate:(ValueUnitPair * _Nonnull)rate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type SWIFT_UNAVAILABLE;
@end


/// Represents patient information retrieved from an X-Series.
SWIFT_CLASS("_TtC10XSeriesSDK7Patient")
@interface Patient : NSObject
/// The age of the patient, in integer years.
@property (nonatomic, readonly) NSInteger age;
/// The gender of the patient.
@property (nonatomic, readonly) enum Gender sex;
/// The first name of the patient.
@property (nonatomic, readonly, copy) NSString * _Nullable firstName;
/// The middle name of the patient.
@property (nonatomic, readonly, copy) NSString * _Nullable middleName;
/// The last name of the patient.
@property (nonatomic, readonly, copy) NSString * _Nullable lastName;
/// The patient’s ID.
@property (nonatomic, readonly, copy) NSString * _Nullable patientId;
- (nonnull instancetype)initWithAge:(NSInteger)age sex:(enum Gender)sex firstName:(NSString * _Nullable)firstName middleName:(NSString * _Nullable)middleName lastName:(NSString * _Nullable)lastName patientId:(NSString * _Nullable)patientId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol PatientDemographicDelegate;

/// PatientDemographicApi provides an opportunity to retrieve Patient Demographic data from the XSeries device,
/// each request process asynchronously and provide result via delegate.
SWIFT_PROTOCOL("_TtP10XSeriesSDK21PatientDemographicApi_")
@protocol PatientDemographicApi <DeviceApi>
/// Retrieve patient demographic info from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getPatientDemographicInfoWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <PatientDemographicDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Save patient demographic info to an XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param patient Patient Info Model Object
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)savePatientDemographicInfoWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password patient:(Patient * _Nonnull)patient delegate:(id <PatientDemographicDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
@end

@class PatientDemographicInfo;

/// PatientDemographicDelegate provides the result of ‘getPatientDemographicInfo’ and savePatientDemographicInfo request
SWIFT_PROTOCOL("_TtP10XSeriesSDK26PatientDemographicDelegate_")
@protocol PatientDemographicDelegate <RequestDelegate>
/// Called when Patient Demographic Info successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides trend
///
/// \param patientDemographicInfo PatientDemographicInfo data model
///
- (void)onGetDemographicInfoRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId patientDemographicInfo:(PatientDemographicInfo * _Nonnull)patientDemographicInfo;
/// Called when Patient Demographic Info successfully saved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides trend
///
/// \param patient Patient Info data model
///
- (void)onSaveDemographicInfoRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId patientInfo:(Patient * _Nonnull)patientInfo;
@end


/// Represents patient information retrieved from an X-Series.
SWIFT_CLASS("_TtC10XSeriesSDK22PatientDemographicInfo")
@interface PatientDemographicInfo : NSObject
/// The first name of the patient.
@property (nonatomic, readonly, copy) NSString * _Nullable firstName;
/// The middle name of the patient.
@property (nonatomic, readonly, copy) NSString * _Nullable middleName;
/// The last name of the patient.
@property (nonatomic, readonly, copy) NSString * _Nullable lastName;
/// The age of the patient, in integer years.
@property (nonatomic, readonly) NSInteger age;
/// The gender of the patient.
@property (nonatomic, readonly) enum Gender sex;
/// <ul>
///   <li>
///     The patient’s ID.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nullable patientId;
/// <ul>
///   <li>
///     The unit serial  number.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nullable unitSerialNumber;
/// <ul>
///   <li>
///     The unit ID.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nullable unitId;
- (nonnull instancetype)initWithFirstName:(NSString * _Nullable)firstName middleName:(NSString * _Nullable)middleName lastName:(NSString * _Nullable)lastName age:(NSInteger)age sex:(enum Gender)sex patientId:(NSString * _Nullable)patientId unitSerialNumber:(NSString * _Nullable)unitSerialNumber unitId:(NSString * _Nullable)unitId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TwelveLeadPrintFormat : NSInteger;
@class NSLocale;

/// ReportGenerator provide methods to generate reports in PDF and PNG format for Twelve Leads and Snapshots
SWIFT_PROTOCOL("_TtP10XSeriesSDK15ReportGenerator_")
@protocol ReportGenerator
/// Creates a PDF representation of a 12-lead object, including its ECG waveforms and all associated data.
/// \param twelveLead 12-lead to turn into a PDF.
///
/// \param format format of ECG graphics, supported standart and cabrera
///
/// \param filePath path to saved PDF document with file name and extension
///
/// \param footer text printed at the bottom of the PDF
///
/// \param locale locale to use non defaul translation in report, default ‘en_US’
///
///
/// throws:
/// exception when report cannot be created
- (BOOL)generate12LeadPDFWithTwelveLead:(TwelveLead * _Nonnull)twelveLead format:(enum TwelveLeadPrintFormat)format filePath:(NSURL * _Nonnull)filePath footer:(NSString * _Nonnull)footer locale:(NSLocale * _Nullable)locale error:(NSError * _Nullable * _Nullable)error;
/// Creates a PNG representation of a 12-lead object, including its ECG waveforms and all associated data.
/// \param twelveLead 12-lead to turn into a PNG.
///
/// \param format format of ECG graphics, supported standart and cabrera
///
/// \param filePath path to saved PDF document with file name and extension
///
/// \param footer text printed at the bottom of the PDF
///
/// \param locale locale to use non defaul translation in report, default ‘en_US’
///
///
/// throws:
/// exception when report cannot be created
- (BOOL)generate12LeadPNGWithTwelveLead:(TwelveLead * _Nonnull)twelveLead format:(enum TwelveLeadPrintFormat)format filePath:(NSURL * _Nonnull)filePath footer:(NSString * _Nonnull)footer locale:(NSLocale * _Nullable)locale error:(NSError * _Nullable * _Nullable)error;
/// Creates a PNG representation of a snapshot object, including its ECG waveforms and all associated data.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     twelveLead: 12-lead to turn into a PNG.
///   </li>
///   <li>
///     filePath: path to saved PDF document with file name and extension
///   </li>
///   <li>
///     footer: text printed at the bottom of the PDF
///   </li>
///   <li>
///     locale: locale to use non defaul translation in report, default ‘en_US’
///   </li>
/// </ul>
///
/// throws:
/// exception when report cannot be created
- (BOOL)generateSnapshotPDFWithSnapshot:(Snapshot * _Nonnull)snapshot filePath:(NSURL * _Nonnull)filePath footer:(NSString * _Nonnull)footer locale:(NSLocale * _Nullable)locale error:(NSError * _Nullable * _Nullable)error;
/// Creates a PDF representation of a snapshot object, including its waveforms and all associated data.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     snapshot: snapshot to turn into a PDF.
///   </li>
///   <li>
///     filePath: path to saved PDF document with file name and extension
///   </li>
///   <li>
///     footer: text printed at the bottom of the PDF
///   </li>
///   <li>
///     locale: locale to use non defaul translation in report, default ‘en_US’
///   </li>
/// </ul>
///
/// throws:
/// exception when report cannot be created
- (BOOL)generateSnapshotPNGWithSnapshot:(Snapshot * _Nonnull)snapshot filePath:(NSURL * _Nonnull)filePath footer:(NSString * _Nonnull)footer locale:(NSLocale * _Nullable)locale error:(NSError * _Nullable * _Nullable)error;
@end



enum RespirationSource : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK15RespirationRate")
@interface RespirationRate : NSObject
@property (nonatomic, readonly, strong) TrendData * _Nonnull trendData;
@property (nonatomic, readonly) enum RespirationSource source;
- (nonnull instancetype)initWithTrendData:(TrendData * _Nonnull)trendData source:(enum RespirationSource)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, RespirationSource, open) {
  RespirationSourceUnspecified = 0,
  RespirationSourceCO_2 = 1,
  RespirationSourceImpedence_respiration = 2,
};


/// Event of XSeries device event, stored base info about event in ‘Event’ class
/// extends with additional info
SWIFT_CLASS("_TtC10XSeriesSDK10ShockEvent")
@interface ShockEvent : Event
/// The selected energy level of shosk event.
@property (nonatomic, readonly, strong) ValueUnitPair * _Nonnull energySelected;
/// The delivered energy level of shosk event.
@property (nonatomic, readonly, strong) ValueUnitPair * _Nonnull energyDelivered;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type energySelected:(ValueUnitPair * _Nonnull)energySelected energyDelivered:(ValueUnitPair * _Nonnull)energyDelivered OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type SWIFT_UNAVAILABLE;
@end

enum SnapshotType : NSInteger;
@class Waveform;

SWIFT_CLASS("_TtC10XSeriesSDK8Snapshot")
@interface Snapshot : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull Id;
@property (nonatomic, readonly) enum SnapshotType type;
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
@property (nonatomic, readonly, copy) NSDate * _Nonnull startDate;
@property (nonatomic, readonly, strong) TrendReport * _Nullable trendReport;
@property (nonatomic, readonly, copy) NSArray<Waveform *> * _Nonnull waveForms;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)Id type:(enum SnapshotType)type date:(NSDate * _Nonnull)date startDate:(NSDate * _Nonnull)startDate trendReport:(TrendReport * _Nullable)trendReport waveForms:(NSArray<Waveform *> * _Nonnull)waveForms OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// SnapshotDelegate provides the result of ‘getSnapshot’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK16SnapshotDelegate_")
@protocol SnapshotDelegate <RequestItemDelegate>
/// Called when snapshot successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides snapshot
///
/// \param snapshotId the id of requested snapshot
///
/// \param snapshot snapshot data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId snapshotId:(NSString * _Nonnull)snapshotId shapshot:(Snapshot * _Nonnull)shapshot;
@end


/// Event of XSeries device event, stored base info about event in ‘Event’ class
/// extends with additional info
SWIFT_CLASS("_TtC10XSeriesSDK13SnapshotEvent")
@interface SnapshotEvent : Event
/// The id of snapshot related to this event.
@property (nonatomic, readonly, copy) NSString * _Nonnull snapshotId;
/// The snapshot type related to this event.
@property (nonatomic, readonly) enum SnapshotType snapshotType;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type snapshotId:(NSString * _Nonnull)snapshotId snapshotType:(enum SnapshotType)snapshotType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, SnapshotType, open) {
  SnapshotTypeUnknown = 0,
  SnapshotTypePacer = 1,
  SnapshotTypeDefib = 2,
  SnapshotTypeTreatment = 3,
  SnapshotTypeMonitor = 4,
  SnapshotTypeAlarm = 5,
  SnapshotTypeAedPresenting = 6,
  SnapshotTypeAedCheckPatient = 7,
  SnapshotTypeAedAnalysisResults = 8,
  SnapshotTypeLtaAlarm = 9,
};

enum TemperatureSource : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK11Temperature")
@interface Temperature : NSObject
@property (nonatomic, readonly, strong) TrendData * _Nonnull trendData;
@property (nonatomic, readonly) enum TemperatureSource source;
- (nonnull instancetype)initWithTrendData:(TrendData * _Nonnull)trendData source:(enum TemperatureSource)source OBJC_DESIGNATED_INITIALIZER;
/// Temperature values are stored on the X-Series as ints
/// So to get real temperature value should be divided by 10
///
/// returns:
/// temperature value
- (float)getValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TemperatureSource, open) {
  TemperatureSourceNa = 0,
  TemperatureSourceUnspecified = 1,
  TemperatureSourceNone = 2,
  TemperatureSourceArt = 3,
  TemperatureSourceCore = 4,
  TemperatureSourceCereb = 5,
  TemperatureSourceRect = 6,
  TemperatureSourceSkin = 7,
};


/// Event of XSeries device event, stored base info about event in ‘Event’ class
/// extends with additional info
SWIFT_CLASS("_TtC10XSeriesSDK14TreatmentEvent")
@interface TreatmentEvent : Event
/// The label with name of treatment event.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type label:(NSString * _Nonnull)label OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10XSeriesSDK9TrendData")
@interface TrendData : NSObject
@property (nonatomic, readonly, strong) ValueUnitPair * _Nonnull value;
@property (nonatomic, readonly) enum AlarmStatus alarm;
@property (nonatomic, readonly) enum DataStatus dataStatus;
- (nonnull instancetype)initWithValue:(ValueUnitPair * _Nonnull)value alarm:(enum AlarmStatus)alarm dataStatus:(enum DataStatus)dataStatus OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// TrendDelegate provides the result of ‘getTrend’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK13TrendDelegate_")
@protocol TrendDelegate <RequestItemDelegate>
/// Called when trend successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides trend
///
/// \param trendId the id of requested trend
///
/// \param trend trend data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId trendId:(NSString * _Nonnull)trendId trend:(TrendReport * _Nonnull)trend;
@end

/// List of all possible trend origins.
typedef SWIFT_ENUM(NSInteger, TrendOrigin, open) {
  TrendOriginPERIODIC = 0,
  TrendOriginNIBP = 1,
  TrendOriginSNAPSHOT = 2,
  TrendOriginTWELVELEAD = 3,
};


/// VitalSigns provides the result of ‘getVitalSignsReport’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK10VitalSigns_")
@protocol VitalSigns
/// Get the VitalSignsReport implemented as a wrapper on top of TrendReport
- (TrendReport * _Nonnull)getVitalSignsReport SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents a single trend report retrieved from an X-Series.  A trend report
/// consists of multiple measurements of the patient’s vital signs taken
/// simultaneously.  Only 7 of the measurements are exposed via this class.
SWIFT_CLASS("_TtC10XSeriesSDK11TrendReport")
@interface TrendReport : NSObject <VitalSigns>
/// The date on which the measurements were taken.
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// The patient’s ETCO2.
@property (nonatomic, readonly, strong) TrendData * _Nonnull etco2;
/// The patient’s SPO2.
@property (nonatomic, readonly, strong) TrendData * _Nonnull spo2;
/// The patient’s heart rate.
@property (nonatomic, readonly, strong) HeartRate * _Nonnull heartRate;
/// The patient’s temperature 1.
@property (nonatomic, readonly, strong) Temperature * _Nonnull temperature1;
/// The patient’s temperature 2.
@property (nonatomic, readonly, strong) Temperature * _Nonnull temperature2;
/// The patient’s temperature delta.
@property (nonatomic, readonly, strong) Temperature * _Nonnull temperatureDelta;
/// The patient’s diastolic blood pressure.
@property (nonatomic, readonly, strong) TrendData * _Nonnull diastolicBloodPressure;
/// The patient’s systolic blood pressure.
@property (nonatomic, readonly, strong) TrendData * _Nonnull systolicBloodPressure;
/// The patient’s min arterial blood pressure.
@property (nonatomic, readonly, strong) TrendData * _Nonnull meanArterialPressure;
/// The patient’s respiration rate.
@property (nonatomic, readonly, strong) RespirationRate * _Nonnull respiration;
/// The ipb 1.
@property (nonatomic, readonly, strong) IBPReport * _Nonnull ibp1;
/// The ipb 2.
@property (nonatomic, readonly, strong) IBPReport * _Nonnull ibp2;
/// The ipb 3.
@property (nonatomic, readonly, strong) IBPReport * _Nonnull ibp3;
/// The trend origin.
@property (nonatomic, readonly) enum TrendOrigin trendOrigin;
/// Get VitalSigns Report.
- (TrendReport * _Nonnull)getVitalSignsReport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date etco2:(TrendData * _Nonnull)etco2 spo2:(TrendData * _Nonnull)spo2 heartRate:(HeartRate * _Nonnull)heartRate temperature1:(Temperature * _Nonnull)temperature1 temperature2:(Temperature * _Nonnull)temperature2 temperatureDelta:(Temperature * _Nonnull)temperatureDelta diastolicBloodPressure:(TrendData * _Nonnull)diastolicBloodPressure systolicBloodPressure:(TrendData * _Nonnull)systolicBloodPressure meanArterialPressure:(TrendData * _Nonnull)meanArterialPressure respiration:(RespirationRate * _Nonnull)respiration ibp1:(IBPReport * _Nonnull)ibp1 ibp2:(IBPReport * _Nonnull)ibp2 ibp3:(IBPReport * _Nonnull)ibp3 trendOrigin:(enum TrendOrigin)trendOrigin OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10XSeriesSDK10TwelveLead")
@interface TwelveLead : NSObject
@property (nonatomic, readonly) NSInteger leadCount;
/// The status of this 12-lead.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull leadStatus;
/// The data of this 12-lead.
@property (nonatomic, readonly, copy) NSArray<NSArray<NSNumber *> *> * _Nonnull leadSamples;
/// The unique ID of this 12-lead.
@property (nonatomic, readonly, copy) NSString * _Nonnull twelveLeadId;
/// Amplitude multiplier. The units of measure for the multiplier are given in the Units field.
/// Each waveform data sample must be multiplied by this value to calculate the actual measured voltage (in Nanovolts).
@property (nonatomic, readonly) double amplitude;
/// The date on which the snapshot was taken.
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// Sample rate for the lead data, in Hz. Always 500.
@property (nonatomic, readonly) double sampleRate;
/// The number of samples taken from each lead.
@property (nonatomic, readonly) NSInteger sampleCount;
/// The user-definable ID of the X-Series device that took the snapshot.
@property (nonatomic, readonly, copy) NSString * _Nonnull unitId;
/// The patient hooked up to the X-Series when the snapshot was taken.
@property (nonatomic, readonly, strong) Patient * _Nonnull patient;
/// Twelve lead analysis result
@property (nonatomic, readonly, strong) AnalysisResult * _Nullable analysisResult;
/// The trend report snapshotted with the 12-lead data.
@property (nonatomic, readonly, strong) TrendReport * _Nullable trendReport;
- (nonnull instancetype)initWithLeadStatus:(NSArray<NSNumber *> * _Nonnull)leadStatus leadSamples:(NSArray<NSArray<NSNumber *> *> * _Nonnull)leadSamples twelveLeadId:(NSString * _Nonnull)twelveLeadId amplitude:(double)amplitude date:(NSDate * _Nonnull)date sampleRate:(double)sampleRate sampleCount:(NSInteger)sampleCount unitId:(NSString * _Nonnull)unitId patient:(Patient * _Nonnull)patient analysisResult:(AnalysisResult * _Nullable)analysisResult trendReport:(TrendReport * _Nullable)trendReport OBJC_DESIGNATED_INITIALIZER;
/// The length, in seconds, of the snapshot.
///
/// returns:
/// duration in seconds.
- (float)totalDurationInSeconds SWIFT_WARN_UNUSED_RESULT;
/// Retrieves raw sample value from the specified lead.
/// \param lead the lead to examine.
///
/// \param index the index of the sample to retrieve.
///
///
/// returns:
/// raw sample value.
- (NSInteger)getRawSampleFromLeadWithLead:(enum Lead)lead index:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the specified sample from the specified lead in millivolts.
/// \param lead the lead to examine.
///
/// \param index the index of the sample to retrieve.
///
///
/// returns:
/// the sample value in mV.
- (float)getSampleFromLeadWithLead:(enum Lead)lead index:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Multiplier used to convert from the normalised lead samples back to mV.
///
/// returns:
/// multiplier value
- (double)getMultiplier SWIFT_WARN_UNUSED_RESULT;
/// Determines whether or not the requested lead and sample pair contains a valid
/// reading.  Invalid readings can be produced by malfunctioning leads, etc.
/// \param lead the lead to examine.
///
/// \param index the index of the sample to verify
///
///
/// returns:
/// true is sample is valid; false if not
- (BOOL)isValidSampleFromLeadWithLead:(enum Lead)lead index:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Generates empty analysis result
- (AnalysisResult * _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// TwelveLeadDelegate provides the result of ‘getTwelveLead’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK18TwelveLeadDelegate_")
@protocol TwelveLeadDelegate <RequestItemDelegate>
/// Called when twelve lead successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides twelve lead
///
/// \param twelveLeadId the id of requested twelve lead
///
/// \param twelveLead twelve lead data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId twelveLeadId:(NSString * _Nonnull)twelveLeadId twelveLead:(TwelveLead * _Nonnull)twelveLead;
@end


/// Event of XSeries device event, stored base info about event in ‘Event’ class
/// extends with additional info
SWIFT_CLASS("_TtC10XSeriesSDK15TwelveLeadEvent")
@interface TwelveLeadEvent : Event
/// The id of twelve lead related to this event.
@property (nonatomic, readonly, copy) NSString * _Nonnull twelveLeadId;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type twelveLeadId:(NSString * _Nonnull)twelveLeadId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, TwelveLeadPrintFormat, open) {
  TwelveLeadPrintFormatStandart = 0,
  TwelveLeadPrintFormatCabrera = 1,
};

typedef SWIFT_ENUM(NSInteger, Unit, open) {
  UnitUndefined = 0,
  UnitNone = 1,
  UnitKpa = 2,
  UnitMmhg = 3,
  UnitC = 4,
  UnitF = 5,
  UnitPercent = 6,
  UnitBpmBeats = 7,
  UnitBpmBreaths = 8,
  UnitNanovolts = 9,
  UnitMicrovolts = 10,
  UnitMillivolts = 11,
  UnitVolts = 12,
  UnitPpm = 13,
  UnitPacerPerMin = 14,
  UnitRpm = 15,
  UnitMah = 16,
  UnitMa = 17,
  UnitMOm = 18,
  UnitG_dl = 19,
  UnitMmo_l = 20,
  UnitMl_dl = 21,
  UnitJ = 22,
};


/// Represents a single value retrieved from an X-Series’ trend report.
SWIFT_CLASS("_TtC10XSeriesSDK13ValueUnitPair")
@interface ValueUnitPair : NSObject
/// The value of the trend measurement.
@property (nonatomic, readonly) float value;
/// The value’s units.
@property (nonatomic, readonly) enum Unit units;
@property (nonatomic, readonly) BOOL isValid;
- (nonnull instancetype)initWithValue:(float)value units:(enum Unit)units isValid:(BOOL)isValid OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class VitalSignsReport;

/// VitalSignsDelegate provides the result of ‘getVitalSignsReport’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK18VitalSignsDelegate_")
@protocol VitalSignsDelegate <RequestDelegate>
/// Called when current numeric successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides trend
///
/// \param vitalSignsReport VitalSignReport data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId vitalSignsReport:(VitalSignsReport * _Nonnull)vitalSignsReport;
@end


/// Represents  vital signs report retrieved from an X-Series.  A vital signs report
/// consists of multiple measurements of the patient’s vital signs taken
/// simultaneously.
SWIFT_CLASS("_TtC10XSeriesSDK16VitalSignsReport")
@interface VitalSignsReport : NSObject
/// The date on which the measurements were taken.
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// The vital signs.
@property (nonatomic, readonly, strong) id <VitalSigns> _Nullable vitalSigns;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date vitalSigns:(id <VitalSigns> _Nullable)vitalSigns OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum WaveformType : NSInteger;
enum WaveformSource : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK8Waveform")
@interface Waveform : NSObject
@property (nonatomic, readonly, copy) NSDate * _Nonnull startTime;
@property (nonatomic, readonly, copy) NSDate * _Nonnull endTime;
@property (nonatomic, readonly) enum WaveformType type;
@property (nonatomic, readonly) enum WaveformSource source;
@property (nonatomic, readonly) enum Unit units;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull samples;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull status;
@property (nonatomic, readonly) float multiplier;
- (nonnull instancetype)initWithStartTime:(NSDate * _Nonnull)startTime endTime:(NSDate * _Nonnull)endTime type:(enum WaveformType)type source:(enum WaveformSource)source units:(enum Unit)units samples:(NSArray<NSNumber *> * _Nonnull)samples multiplier:(float)multiplier status:(NSArray<NSNumber *> * _Nonnull)status OBJC_DESIGNATED_INITIALIZER;
/// Calculates waveform duration in milliseconds
///
/// returns:
/// duration in milliseconds
- (NSTimeInterval)getDuration SWIFT_WARN_UNUSED_RESULT;
- (float)getSamplesWithPosition:(NSInteger)position SWIFT_WARN_UNUSED_RESULT;
/// Determines whether or not the requested sample contains a valid
/// reading. Invalid readings can be produced by malfunctioning leads, etc.
/// \param index the index of the sample to verify
///
///
/// returns:
/// true is sample is valid; false if not
- (BOOL)isValidSampleWithIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, WaveformSource, open) {
  WaveformSourceUnknown = 0,
  WaveformSourceUnspecified = 1,
  WaveformSourceNone = 2,
  WaveformSourceAbp = 3,
  WaveformSourceArt = 4,
  WaveformSourceAo = 5,
  WaveformSourceCvp = 6,
  WaveformSourceIcp = 7,
  WaveformSourceLap = 8,
  WaveformSourceP1 = 9,
  WaveformSourceP2 = 10,
  WaveformSourceP3 = 11,
  WaveformSourcePap = 12,
  WaveformSourceRap = 13,
  WaveformSourceUap = 14,
  WaveformSourceUvp = 15,
  WaveformSourceBap = 16,
  WaveformSourceFap = 17,
};

typedef SWIFT_ENUM(NSInteger, WaveformType, open) {
  WaveformTypeUnknown = 0,
  WaveformTypePads = 1,
  WaveformTypeLeadI = 2,
  WaveformTypeLeadII = 3,
  WaveformTypeLeadIII = 4,
  WaveformTypeLeadAvr = 5,
  WaveformTypeLeadAvl = 6,
  WaveformTypeLeadAvf = 7,
  WaveformTypeLeadV5LeadCable = 8,
  WaveformTypeLeadV1 = 9,
  WaveformTypeLeadV2 = 10,
  WaveformTypeLeadV3 = 11,
  WaveformTypeLeadV4 = 12,
  WaveformTypeLeadV5 = 13,
  WaveformTypeLeadV6 = 14,
  WaveformTypeCo2 = 15,
  WaveformTypeSpo2 = 16,
  WaveformTypeIbp1 = 17,
  WaveformTypeIbp2 = 18,
  WaveformTypeIbp3 = 19,
  WaveformTypeFilteredEcg = 20,
  WaveformTypeCo2Kpa = 21,
  WaveformTypeCo2Percent = 22,
  WaveformTypeIbp1Kpa = 23,
  WaveformTypeIbp2Kpa = 24,
  WaveformTypeIbp3Kpa = 25,
};


SWIFT_CLASS("_TtC10XSeriesSDK12WaveformView")
@interface WaveformView : UIScrollView <UIScrollViewDelegate>
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)handleTap:(UITapGestureRecognizer * _Nullable)recognizer;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
@end


/// Represents a case summary retrieved from an X-Series.
SWIFT_CLASS("_TtC10XSeriesSDK16XCaseCatalogItem")
@interface XCaseCatalogItem : NSObject
/// The status of the case.
@property (nonatomic, readonly) enum CaseStatus status;
/// The time on which the case was uploaded.
@property (nonatomic, readonly, copy) NSDate * _Nullable uploadTime;
/// The number of 12 leads taken during the case.
@property (nonatomic, readonly) NSInteger numberOf12Leads;
/// The number of shocks administered during the case.
@property (nonatomic, readonly) NSInteger numberOfShocks;
/// The time on which the case began.
@property (nonatomic, readonly, copy) NSDate * _Nullable startTime;
/// The time on which the case ended.
@property (nonatomic, readonly, copy) NSDate * _Nullable endTime;
/// The ID of the case.
@property (nonatomic, readonly, copy) NSString * _Nonnull caseId;
/// Indicates whether or not audio is available in the case.
@property (nonatomic, readonly) BOOL audioAvailable;
@property (nonatomic, strong) NSNumber * _Nullable _duration;
- (nonnull instancetype)initWithStatus:(enum CaseStatus)status uploadTime:(NSDate * _Nullable)uploadTime numberOf12Leads:(NSInteger)numberOf12Leads numberOfShocks:(NSInteger)numberOfShocks startTime:(NSDate * _Nullable)startTime endTime:(NSDate * _Nullable)endTime caseId:(NSString * _Nonnull)caseId audioAvailable:(BOOL)audioAvailable duration:(NSNumber * _Nullable)duration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// CaseListDelegate provides the result of ‘getCaseList’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK24XCaseCatalogItemDelegate_")
@protocol XCaseCatalogItemDelegate <RequestDelegate>
/// Called when case list successfully retrieved
/// \param requestCode the unique id of downloading request
///
/// \param deviceId the serial number of the device that provides case list
///
/// \param cases array of retreived cases
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId cases:(NSArray<XCaseCatalogItem *> * _Nonnull)cases;
@end


SWIFT_CLASS("_TtC10XSeriesSDK13XSeriesDevice")
@interface XSeriesDevice : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull serialNumber;
@property (nonatomic, readonly, copy) NSString * _Nonnull ipAdress;
- (nonnull instancetype)initWithSerialNumber:(NSString * _Nonnull)serialNumber ipAdress:(NSString * _Nonnull)ipAdress OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ZOXErrorType : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK8ZOXError")
@interface ZOXError : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull errorMessage;
@property (nonatomic, readonly) enum ZOXErrorType errorType;
- (nonnull instancetype)initWithType:(enum ZOXErrorType)type message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ZOXErrorType, open) {
  ZOXErrorTypeUndefined = 0,
/// Looking the ZOXSeries device in local network with Bonjour services can’t started, check your network setting.
  ZOXErrorTypeDeviceDiscovering = 1,
/// ZOXSeries device founded in local network, but can’t be resolved.
  ZOXErrorTypeDeviceDiscoveryResolve = 2,
/// The answer from ZOXSeries is broken or can’t be parsed.
  ZOXErrorTypeResponseParse = 3,
/// The answer from ZOXSeries is broken or can’t be parsed.
  ZOXErrorTypeJsonParse = 4,
/// The request failed with network error, please try again later.
  ZOXErrorTypeNetwork = 5,
/// Not enough free space for saving json case file.
  ZOXErrorTypeNotEnoughtFreeSpace = 6,
/// Error during the saving file to provided folder.
  ZOXErrorTypeFileSaving = 7,
/// Error during the cration PNG image in Graphic Context
  ZOXErrorTypeImageCreate = 8,
/// Provided file is null or can’t found on disk.
  ZOXErrorTypeFileNotFound = 9,
/// Provided file has unsupported format
  ZOXErrorTypeUnsuportedFormat = 10,
/// Provided JSON is not ZOLL json
  ZOXErrorTypeInvalidSchema = 11,
/// Provided wrong cradencials
  ZOXErrorTypeInvalidCredentials = 12,
/// Provided invalid character
  ZOXErrorTypeInvalidCharacter = 13,
};


SWIFT_CLASS("_TtC10XSeriesSDK9ZOXSeries")
@interface ZOXSeries : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) ZOXSeries * _Nonnull shared;)
+ (ZOXSeries * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(ZOXSeries * _Nonnull)value;
/// DeviceBrowser implementation
@property (nonatomic, readonly, strong) id <DeviceApi> _Nonnull deviceBrowser;
/// DeviceApi implementation
@property (nonatomic, readonly, strong) id <DevicesBrowser> _Nonnull xSeriesBrowser;
/// CaseParser implementation
@property (nonatomic, readonly, strong) id <CaseParser> _Nonnull caseParser;
/// ReportGenerator implementation
@property (nonatomic, readonly, strong) id <ReportGenerator> _Nonnull reportGenerator;
/// About implementation
/// Exposes a version property that returns SDK version
@property (nonatomic, readonly, strong) About * _Nonnull about;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef XSERIESSDK_SWIFT_H
#define XSERIESSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="XSeriesSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

SWIFT_CLASS("_TtC10XSeriesSDK5About")
@interface About : NSObject
- (NSString * _Nonnull)Version SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Alarm status
/// For parameters that support alarms, indicates whether the parameter is alarming.
/// Present for the following parameters: Etco2, Fico2, NIBP (Sys/Dia/Map),
/// IBP (Sys/Dia/Map), Spo2, SpCo, SpMet, SpHb, SpOC, PI, PVI, Resp, Hr, Temp (all channels).
/// 0 = Not Alarming
/// 1 = Alarming
typedef SWIFT_ENUM(NSInteger, AlarmStatus, open) {
  AlarmStatusNot_alarming = 0,
  AlarmStatusAlarming = 1,
};

@class NSNumber;
@class NSArray;

/// Represents Analysis result for twelve lead
SWIFT_CLASS("_TtC10XSeriesSDK14AnalysisResult")
@interface AnalysisResult : NSObject
@property (nonatomic, strong) NSNumber * _Nullable _heartRate;
@property (nonatomic, strong) NSNumber * _Nullable _prInterval;
@property (nonatomic, strong) NSNumber * _Nullable _qtInterval;
@property (nonatomic, strong) NSNumber * _Nullable _correctedQTInterval;
@property (nonatomic, strong) NSNumber * _Nullable _qrsDuration;
@property (nonatomic, strong) NSNumber * _Nullable _pAxis;
@property (nonatomic, strong) NSNumber * _Nullable _qrsAxis;
@property (nonatomic, strong) NSNumber * _Nullable _tAxis;
@property (nonatomic, strong) NSArray * _Nonnull _stjValues;
- (nonnull instancetype)initWithHeartRate:(NSNumber * _Nullable)heartRate prInterval:(NSNumber * _Nullable)prInterval qtInterval:(NSNumber * _Nullable)qtInterval correctedQTInterval:(NSNumber * _Nullable)correctedQTInterval qrsDuration:(NSNumber * _Nullable)qrsDuration pAxis:(NSNumber * _Nullable)pAxis qrsAxis:(NSNumber * _Nullable)qrsAxis tAxis:(NSNumber * _Nullable)tAxis statements:(NSArray<NSString *> * _Nonnull)statements stjValues:(NSArray<NSNumber *> * _Nonnull)stjValues OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSDate;
@class TrendReport;
@class Event;
@class Snapshot;
@class Patient;
@class TwelveLead;
@class Defibrillator;

SWIFT_CLASS("_TtC10XSeriesSDK4Case")
@interface Case : NSObject
@property (nonatomic, readonly, copy) NSDate * _Nonnull caseDate;
@property (nonatomic, readonly, copy) NSArray<TrendReport *> * _Nonnull trends;
@property (nonatomic, readonly, copy) NSArray<Event *> * _Nonnull events;
@property (nonatomic, readonly, copy) NSArray<Snapshot *> * _Nonnull snapshots;
@property (nonatomic, readonly, strong) Patient * _Nonnull patient;
@property (nonatomic, readonly, copy) NSArray<TwelveLead *> * _Nonnull twelveLeads;
@property (nonatomic, readonly, strong) Defibrillator * _Nonnull defibrillator;
- (nonnull instancetype)initWithCaseDate:(NSDate * _Nonnull)caseDate trends:(NSArray<TrendReport *> * _Nonnull)trends events:(NSArray<Event *> * _Nonnull)events snapshots:(NSArray<Snapshot *> * _Nonnull)snapshots patient:(Patient * _Nonnull)patient twelveLeads:(NSArray<TwelveLead *> * _Nonnull)twelveLeads defibrillator:(Defibrillator * _Nonnull)defibrillator OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol CaseParserDelegate;
@class NSData;

/// CaseParser provides an opportunity to parse existing JSON dictionary or files which has .zol extension.
/// Parsing can be processed the called thread or with using another thread, the result of parsing can be returned as ‘FullCase’ model or throws ZOXError.
/// For using asynchronous parsing provide an implementation of ‘CaseParserDelegate’  and process the result in a callback.
SWIFT_PROTOCOL("_TtP10XSeriesSDK10CaseParser_")
@protocol CaseParser
/// Parses case from JSON dictionary synchronous
/// \param json dictionary of JSON data to parse
///
///
/// throws:
/// exception when JSON can’t be parsed
///
/// returns:
/// parsed FullCase model from dictionary
- (Case * _Nullable)parseCaseFromJson:(NSDictionary<NSString *, id> * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parses case from JSON dictionary asynchronous
/// \param json dictionary of JSON data to parse
///
/// \param delegate delegate for provide parsing result
///
- (void)parseCaseFromJson:(NSDictionary<NSString *, id> * _Nonnull)json delegate:(id <CaseParserDelegate> _Nonnull)delegate;
/// Parses case from *.zol file extension synchronous
/// \param file contained data in file
///
///
/// throws:
/// exception when file can’t be parsed
///
/// returns:
/// parsed FullCase model from file
- (Case * _Nullable)parseZolFileWithFile:(NSData * _Nonnull)file error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parses case from *.zol file extension asynchronous
/// \param file contained data in file
///
/// \param delegate delegate for provide parsing result
///
- (void)parseZolFileWithFile:(NSData * _Nonnull)file delegate:(id <CaseParserDelegate> _Nonnull)delegate;
@end

@class ZOXError;

/// CaseParserDelegate provides the result of work CaseParser
SWIFT_PROTOCOL("_TtP10XSeriesSDK18CaseParserDelegate_")
@protocol CaseParserDelegate
/// Called when case parse successfully
/// \param fullCase parsed case model
///
- (void)onCaseParsedSuccessWithFullCase:(Case * _Nonnull)fullCase;
/// Called when case parse finished with error
/// \param error the error of parsing
///
- (void)onCaseParseErrorWithError:(ZOXError * _Nonnull)error;
@end

typedef SWIFT_ENUM(NSInteger, CaseStatus, open) {
  CaseStatusPast = 0,
  CaseStatusCurrent = 1,
  CaseStatusUnknow = 2,
};


/// RequestDelegate is parent delegate for DeviceApi delegates, provides common rules to passing error
SWIFT_PROTOCOL("_TtP10XSeriesSDK15RequestDelegate_")
@protocol RequestDelegate
/// Called when the request is failed
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device
///
/// \param error the error of retrieving the data
///
- (void)onRequestFailedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId error:(ZOXError * _Nonnull)error;
/// Called when the device has a not default password or provided the password is wrong
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device
///
- (void)onAuthenticationFailedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId;
@end


/// CurrentShapshotDelegate provides the result of ‘getCurrentSnapshot’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK23CurrentSnapshotDelegate_")
@protocol CurrentSnapshotDelegate <RequestDelegate>
/// Called when current snapshot successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides snapshot
///
/// \param snapshot shapshot data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId snapshot:(Snapshot * _Nonnull)snapshot;
@end


/// CurrentTrendDelegate provides the result of ‘getCurrentTrend’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK20CurrentTrendDelegate_")
@protocol CurrentTrendDelegate <RequestDelegate>
/// Called when current trend successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides trend
///
/// \param trend trend data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId trend:(TrendReport * _Nonnull)trend;
@end

/// List of all possible data status.
/// 0 = Valid
/// 1 = Invalid
/// 2 = Underrange
/// 3 = Overrange
typedef SWIFT_ENUM(NSInteger, DataStatus, open) {
  DataStatusValid = 0,
  DataStatusInvalid = 1,
  DataStatusUnderrange = 2,
  DataStatusOverrange = 3,
};


/// Represents an X-Series device.  Used by the ZOLL Writer to store information
/// about the source device that created the records it is writing.
SWIFT_CLASS("_TtC10XSeriesSDK13Defibrillator")
@interface Defibrillator : NSObject
/// The serial number of the device.
@property (nonatomic, readonly, copy) NSString * _Nonnull serialNumber;
/// The unit ID of the device.
@property (nonatomic, readonly, copy) NSString * _Nonnull unitId;
/// The firmware version of the device.  X-Series devices report several firmware versions;
/// we’re only interested in the “PpSwVer” information.
@property (nonatomic, readonly, copy) NSString * _Nonnull softwareVersion;
- (nonnull instancetype)initWithSerialNumber:(NSString * _Nonnull)serialNumber unitId:(NSString * _Nonnull)unitId softwareVersion:(NSString * _Nonnull)softwareVersion OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class XSeriesDevice;
@protocol XCaseCatalogItemDelegate;
@protocol FullCaseDelegate;
@class NSURL;
@protocol DownloadCaseDelegate;
@protocol MidCaseListDelegate;
@protocol TwelveLeadDelegate;
@protocol TrendDelegate;
@protocol SnapshotDelegate;
@protocol VitalSignsDelegate;

/// DeviceApi provides an opportunity to retrieve data from the XSeries device,
/// each request process asynchronously and provide result via delegate.
SWIFT_PROTOCOL("_TtP10XSeriesSDK9DeviceApi_")
@protocol DeviceApi
/// Retrieve XCaseCatalogItem list from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getXCaseCatalogItemWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <XCaseCatalogItemDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieve case from XSeries device
/// \param device XSeriesDevice object
///
/// \param caseId case id
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getCaseWithDevice:(XSeriesDevice * _Nonnull)device caseId:(NSString * _Nonnull)caseId password:(NSString * _Nullable)password delegate:(id <FullCaseDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Downloads case from XSeries device
/// \param device XSeriesDevice object
///
/// \param caseId case id
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)downloadCaseWithDevice:(XSeriesDevice * _Nonnull)device caseId:(NSString * _Nonnull)caseId folder:(NSURL * _Nonnull)folder password:(NSString * _Nullable)password delegate:(id <DownloadCaseDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieves list of TwelveLeads from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getTwelveLeadListWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <MidCaseListDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieves list of TwelveLeads from XSeries device
/// \param device XSeriesDevice object
///
/// \param twelveLeadId twelve lead id
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getTwelveLeadWithDevice:(XSeriesDevice * _Nonnull)device twelveLeadId:(NSString * _Nonnull)twelveLeadId password:(NSString * _Nullable)password delegate:(id <TwelveLeadDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieve list of trends from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getTrendListWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <MidCaseListDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieves trend from XSeries device
/// \param device XSeriesDevice object
///
/// \param trendId trend id
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getTrendWithDevice:(XSeriesDevice * _Nonnull)device trendId:(NSString * _Nonnull)trendId password:(NSString * _Nullable)password delegate:(id <TrendDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieve current trend from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getCurrentTrendWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <CurrentTrendDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieves list of snapshots from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getSnapshotListWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <MidCaseListDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieves snapshot from XSeries device
/// \param device XSeriesDevice object
///
/// \param shapshotId snapshot id
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getSnapshotWithDevice:(XSeriesDevice * _Nonnull)device shapshotId:(NSString * _Nonnull)shapshotId password:(NSString * _Nullable)password delegate:(id <SnapshotDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieves current snapshot from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getCurrentSnapshotWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <CurrentSnapshotDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Retrieve vital signs report from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getCurrentVitalSignsReportWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <VitalSignsDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Cancel request
/// \param requestId request id to cancel
///
- (void)cancelRequestWithRequestId:(NSInteger)requestId;
@end

@protocol DevicesDelegate;

/// DevicesBrowser searches the network for X-Series devices using Bonjour.
SWIFT_PROTOCOL("_TtP10XSeriesSDK14DevicesBrowser_")
@protocol DevicesBrowser
/// Starts discovering X-Series devices in the network.
/// \param delegate delegate to return result
///
- (void)startWithDelegate:(id <DevicesDelegate> _Nonnull)delegate;
/// Stops discovering X-Series devices in the network.
- (void)stop;
@end


/// DevicesDelegate provides the result searching XSeriesDevices via Bonjour, used with ‘DevicesBrowser’
SWIFT_PROTOCOL("_TtP10XSeriesSDK15DevicesDelegate_")
@protocol DevicesDelegate
/// Called when new device found in a local network
/// \param device the device which found in a local network
///
- (void)onDeviceFoundWithDevice:(XSeriesDevice * _Nonnull)device;
/// Called when founded device lost in a local network
/// \param device the device which lost in a local network
///
- (void)onDeviceLostWithDevice:(XSeriesDevice * _Nonnull)device;
/// Called when searching finished with error
/// \param error the error of searching devices
///
- (void)onBrowseErrorWithError:(ZOXError * _Nonnull)error;
@end


/// DownloadCaseDelegate provides the result of work DeviceApi
SWIFT_PROTOCOL("_TtP10XSeriesSDK20DownloadCaseDelegate_")
@protocol DownloadCaseDelegate
/// Called when case successfully downloaded
/// \param requestCode the unique id of downloading request
///
/// \param deviceId the serial number of the device that provide downloaded case
///
/// \param caseId requested case Id
///
/// \param file URL of downloaded file
///
- (void)onDownloadCompletedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId caseId:(NSString * _Nonnull)caseId file:(NSURL * _Nonnull)file;
/// Called when downloading finished with error
/// \param requestCode the unique id of downloading request
///
/// \param deviceId the serial number of the device that failed to download case
///
/// \param caseId requested case Id
///
/// \param error the error of downloading case
///
- (void)onDownloadFailedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId caseId:(NSString * _Nonnull)caseId error:(ZOXError * _Nonnull)error;
/// Authentication failed. (XSeries firmware v02.30 added the ability to change network password.)
/// \param requestCode the unique id of downloading request
///
/// \param deviceId the serial number of device that failed to download case
///
- (void)onAuthenticationFailedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId;
@end

@class NSCoder;
@class UITapGestureRecognizer;
@class UIView;

SWIFT_CLASS("_TtC10XSeriesSDK7ECGView")
@interface ECGView : UIScrollView <UIScrollViewDelegate>
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)handleTap:(UITapGestureRecognizer * _Nullable)recognizer;
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
@end

enum EventType : NSInteger;

/// Root object of XSeries device event, stored base info about event.
SWIFT_CLASS("_TtC10XSeriesSDK5Event")
@interface Event : NSObject
/// Date of event.
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// Type of event.
@property (nonatomic, readonly) enum EventType type;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The type of recorder event on XSeries device
typedef SWIFT_ENUM(NSInteger, EventType, open) {
  EventTypeSyncOn = 0,
  EventTypeSyncOff = 1,
  EventTypeSyncFailure = 2,
  EventTypeNoShokAdvised = 3,
  EventTypeShokAdvised = 4,
  EventTypePacerStart = 5,
  EventTypePacerOff = 6,
  EventTypeShock = 7,
  EventTypeTreatment = 8,
  EventTypeSnapshot = 9,
  EventTypeTwelveLead = 10,
  EventTypeSystemOn = 11,
};


/// RequestDelegate is parent delegate for DeviceApi delegates which provides single info model, provides common rules to passing error
SWIFT_PROTOCOL("_TtP10XSeriesSDK19RequestItemDelegate_")
@protocol RequestItemDelegate
/// Called when the request for item details is failed
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides the item
///
/// \param itemId the id of the item which requested
///
/// \param error the error of retrieving the item
///
- (void)onRequestFailedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId itemId:(NSString * _Nonnull)itemId error:(ZOXError * _Nonnull)error;
/// Called when the device has a not default password or provided the password is wrong
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides item
///
- (void)onAuthenticationFailedWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId;
@end


/// FullCaseDelegate provides the result of ‘getCase’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK16FullCaseDelegate_")
@protocol FullCaseDelegate <RequestItemDelegate>
/// Called when full case successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides full case
///
/// \param caseId the id of requested case
///
/// \param fullCase full case data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId caseId:(NSString * _Nonnull)caseId fullCase:(Case * _Nonnull)fullCase;
@end

/// List of all possible genders.
typedef SWIFT_ENUM(NSInteger, Gender, open) {
  GenderMale = 0,
  GenderFemale = 1,
  GenderUnknown = 2,
};

@class TrendData;
enum HeartRateSource : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK9HeartRate")
@interface HeartRate : NSObject
@property (nonatomic, readonly, strong) TrendData * _Nonnull trendData;
@property (nonatomic, readonly) enum HeartRateSource source;
- (nonnull instancetype)initWithTrendData:(TrendData * _Nonnull)trendData source:(enum HeartRateSource)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HeartRateSource, open) {
  HeartRateSourceUnspecified = 0,
  HeartRateSourceECG = 1,
  HeartRateSourceSPO_2 = 2,
  HeartRateSourceIBP_1 = 3,
  HeartRateSourceIBP_2 = 4,
  HeartRateSourceIBP_3 = 5,
  HeartRateSourceNIBP = 6,
};

enum IBPSource : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK9IBPReport")
@interface IBPReport : NSObject
@property (nonatomic, readonly) NSInteger chanNum;
@property (nonatomic, readonly) enum IBPSource sourse;
@property (nonatomic, readonly, strong) TrendData * _Nonnull diastolicBloodPressure;
@property (nonatomic, readonly, strong) TrendData * _Nonnull systolicBloodPressure;
@property (nonatomic, readonly, strong) TrendData * _Nonnull meanArterialPressure;
- (nonnull instancetype)initWithChanNum:(NSInteger)chanNum sourse:(enum IBPSource)sourse diastolicBloodPressure:(TrendData * _Nonnull)diastolicBloodPressure systolicBloodPressure:(TrendData * _Nonnull)systolicBloodPressure meanArterialPressure:(TrendData * _Nonnull)meanArterialPressure OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, IBPSource, open) {
  IBPSourceUnspecified = 0,
  IBPSourceNone = 1,
  IBPSourceABP = 2,
  IBPSourceART = 3,
  IBPSourceAO = 4,
  IBPSourceCVP = 5,
  IBPSourceICP = 6,
  IBPSourceLAP = 7,
  IBPSourceP1 = 8,
  IBPSourceP2 = 9,
  IBPSourceP3 = 10,
  IBPSourcePAP = 11,
  IBPSourceRAP = 12,
  IBPSourceUAP = 13,
  IBPSourceUVP = 14,
  IBPSourceBAP = 15,
  IBPSourceFAP = 16,
};

typedef SWIFT_ENUM(NSInteger, Lead, open) {
  LeadI = 0,
  LeadII = 1,
  LeadIII = 2,
  LeadAVR = 3,
  LeadAVL = 4,
  LeadAVF = 5,
  LeadV1 = 6,
  LeadV2 = 7,
  LeadV3 = 8,
  LeadV4 = 9,
  LeadV5 = 10,
  LeadV6 = 11,
};

enum MidCaseType : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK11MidCaseInfo")
@interface MidCaseInfo : NSObject
@property (nonatomic, readonly) enum MidCaseType type;
@property (nonatomic, readonly, copy) NSDate * _Nonnull rtcTime;
@property (nonatomic, readonly, copy) NSString * _Nonnull caseID;
@property (nonatomic, readonly, copy) NSString * _Nonnull UID;
- (nonnull instancetype)initWithType:(enum MidCaseType)type rtcTime:(NSDate * _Nonnull)rtcTime caseID:(NSString * _Nonnull)caseID UID:(NSString * _Nonnull)UID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// MidCaseListDelegate provides the result of ‘getTwelveLeadList’, ‘getSnapshotList’, ‘getTrendList’ requests
SWIFT_PROTOCOL("_TtP10XSeriesSDK19MidCaseListDelegate_")
@protocol MidCaseListDelegate <RequestDelegate>
/// Called when mid cases successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides twelve lead
///
/// \param midCases mid case data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId midCases:(NSArray<MidCaseInfo *> * _Nonnull)midCases;
@end

typedef SWIFT_ENUM(NSInteger, MidCaseType, open) {
  MidCaseTypeTwelveLead = 0,
  MidCaseTypeTrend = 1,
  MidCaseTypeSnapshot = 2,
};

@class ValueUnitPair;

/// Event of XSeries device event, stored base info about event in ‘Event’ class
/// extends with additional info
SWIFT_CLASS("_TtC10XSeriesSDK15PacerStartEvent")
@interface PacerStartEvent : Event
/// Current of event.
@property (nonatomic, readonly, strong) ValueUnitPair * _Nonnull current;
/// Rate of pacer event.
@property (nonatomic, readonly, strong) ValueUnitPair * _Nonnull rate;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type current:(ValueUnitPair * _Nonnull)current rate:(ValueUnitPair * _Nonnull)rate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type SWIFT_UNAVAILABLE;
@end


/// Represents patient information retrieved from an X-Series.
SWIFT_CLASS("_TtC10XSeriesSDK7Patient")
@interface Patient : NSObject
/// The age of the patient, in integer years.
@property (nonatomic, readonly) NSInteger age;
/// The gender of the patient.
@property (nonatomic, readonly) enum Gender sex;
/// The first name of the patient.
@property (nonatomic, readonly, copy) NSString * _Nullable firstName;
/// The middle name of the patient.
@property (nonatomic, readonly, copy) NSString * _Nullable middleName;
/// The last name of the patient.
@property (nonatomic, readonly, copy) NSString * _Nullable lastName;
/// The patient’s ID.
@property (nonatomic, readonly, copy) NSString * _Nullable patientId;
- (nonnull instancetype)initWithAge:(NSInteger)age sex:(enum Gender)sex firstName:(NSString * _Nullable)firstName middleName:(NSString * _Nullable)middleName lastName:(NSString * _Nullable)lastName patientId:(NSString * _Nullable)patientId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol PatientDemographicDelegate;

/// PatientDemographicApi provides an opportunity to retrieve Patient Demographic data from the XSeries device,
/// each request process asynchronously and provide result via delegate.
SWIFT_PROTOCOL("_TtP10XSeriesSDK21PatientDemographicApi_")
@protocol PatientDemographicApi <DeviceApi>
/// Retrieve patient demographic info from XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)getPatientDemographicInfoWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password delegate:(id <PatientDemographicDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Save patient demographic info to an XSeries device
/// \param device XSeriesDevice object
///
/// \param password XSeriesDevice password or ‘nil’ to use default
///
/// \param patient Patient Info Model Object
///
/// \param delegate delegate to return result or error
///
///
/// returns:
/// unique request id
- (NSInteger)savePatientDemographicInfoWithDevice:(XSeriesDevice * _Nonnull)device password:(NSString * _Nullable)password patient:(Patient * _Nonnull)patient delegate:(id <PatientDemographicDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
@end

@class PatientDemographicInfo;

/// PatientDemographicDelegate provides the result of ‘getPatientDemographicInfo’ and savePatientDemographicInfo request
SWIFT_PROTOCOL("_TtP10XSeriesSDK26PatientDemographicDelegate_")
@protocol PatientDemographicDelegate <RequestDelegate>
/// Called when Patient Demographic Info successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides trend
///
/// \param patientDemographicInfo PatientDemographicInfo data model
///
- (void)onGetDemographicInfoRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId patientDemographicInfo:(PatientDemographicInfo * _Nonnull)patientDemographicInfo;
/// Called when Patient Demographic Info successfully saved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides trend
///
/// \param patient Patient Info data model
///
- (void)onSaveDemographicInfoRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId patientInfo:(Patient * _Nonnull)patientInfo;
@end


/// Represents patient information retrieved from an X-Series.
SWIFT_CLASS("_TtC10XSeriesSDK22PatientDemographicInfo")
@interface PatientDemographicInfo : NSObject
/// The first name of the patient.
@property (nonatomic, readonly, copy) NSString * _Nullable firstName;
/// The middle name of the patient.
@property (nonatomic, readonly, copy) NSString * _Nullable middleName;
/// The last name of the patient.
@property (nonatomic, readonly, copy) NSString * _Nullable lastName;
/// The age of the patient, in integer years.
@property (nonatomic, readonly) NSInteger age;
/// The gender of the patient.
@property (nonatomic, readonly) enum Gender sex;
/// <ul>
///   <li>
///     The patient’s ID.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nullable patientId;
/// <ul>
///   <li>
///     The unit serial  number.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nullable unitSerialNumber;
/// <ul>
///   <li>
///     The unit ID.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nullable unitId;
- (nonnull instancetype)initWithFirstName:(NSString * _Nullable)firstName middleName:(NSString * _Nullable)middleName lastName:(NSString * _Nullable)lastName age:(NSInteger)age sex:(enum Gender)sex patientId:(NSString * _Nullable)patientId unitSerialNumber:(NSString * _Nullable)unitSerialNumber unitId:(NSString * _Nullable)unitId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TwelveLeadPrintFormat : NSInteger;
@class NSLocale;

/// ReportGenerator provide methods to generate reports in PDF and PNG format for Twelve Leads and Snapshots
SWIFT_PROTOCOL("_TtP10XSeriesSDK15ReportGenerator_")
@protocol ReportGenerator
/// Creates a PDF representation of a 12-lead object, including its ECG waveforms and all associated data.
/// \param twelveLead 12-lead to turn into a PDF.
///
/// \param format format of ECG graphics, supported standart and cabrera
///
/// \param filePath path to saved PDF document with file name and extension
///
/// \param footer text printed at the bottom of the PDF
///
/// \param locale locale to use non defaul translation in report, default ‘en_US’
///
///
/// throws:
/// exception when report cannot be created
- (BOOL)generate12LeadPDFWithTwelveLead:(TwelveLead * _Nonnull)twelveLead format:(enum TwelveLeadPrintFormat)format filePath:(NSURL * _Nonnull)filePath footer:(NSString * _Nonnull)footer locale:(NSLocale * _Nullable)locale error:(NSError * _Nullable * _Nullable)error;
/// Creates a PNG representation of a 12-lead object, including its ECG waveforms and all associated data.
/// \param twelveLead 12-lead to turn into a PNG.
///
/// \param format format of ECG graphics, supported standart and cabrera
///
/// \param filePath path to saved PDF document with file name and extension
///
/// \param footer text printed at the bottom of the PDF
///
/// \param locale locale to use non defaul translation in report, default ‘en_US’
///
///
/// throws:
/// exception when report cannot be created
- (BOOL)generate12LeadPNGWithTwelveLead:(TwelveLead * _Nonnull)twelveLead format:(enum TwelveLeadPrintFormat)format filePath:(NSURL * _Nonnull)filePath footer:(NSString * _Nonnull)footer locale:(NSLocale * _Nullable)locale error:(NSError * _Nullable * _Nullable)error;
/// Creates a PNG representation of a snapshot object, including its ECG waveforms and all associated data.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     twelveLead: 12-lead to turn into a PNG.
///   </li>
///   <li>
///     filePath: path to saved PDF document with file name and extension
///   </li>
///   <li>
///     footer: text printed at the bottom of the PDF
///   </li>
///   <li>
///     locale: locale to use non defaul translation in report, default ‘en_US’
///   </li>
/// </ul>
///
/// throws:
/// exception when report cannot be created
- (BOOL)generateSnapshotPDFWithSnapshot:(Snapshot * _Nonnull)snapshot filePath:(NSURL * _Nonnull)filePath footer:(NSString * _Nonnull)footer locale:(NSLocale * _Nullable)locale error:(NSError * _Nullable * _Nullable)error;
/// Creates a PDF representation of a snapshot object, including its waveforms and all associated data.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     snapshot: snapshot to turn into a PDF.
///   </li>
///   <li>
///     filePath: path to saved PDF document with file name and extension
///   </li>
///   <li>
///     footer: text printed at the bottom of the PDF
///   </li>
///   <li>
///     locale: locale to use non defaul translation in report, default ‘en_US’
///   </li>
/// </ul>
///
/// throws:
/// exception when report cannot be created
- (BOOL)generateSnapshotPNGWithSnapshot:(Snapshot * _Nonnull)snapshot filePath:(NSURL * _Nonnull)filePath footer:(NSString * _Nonnull)footer locale:(NSLocale * _Nullable)locale error:(NSError * _Nullable * _Nullable)error;
@end



enum RespirationSource : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK15RespirationRate")
@interface RespirationRate : NSObject
@property (nonatomic, readonly, strong) TrendData * _Nonnull trendData;
@property (nonatomic, readonly) enum RespirationSource source;
- (nonnull instancetype)initWithTrendData:(TrendData * _Nonnull)trendData source:(enum RespirationSource)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, RespirationSource, open) {
  RespirationSourceUnspecified = 0,
  RespirationSourceCO_2 = 1,
  RespirationSourceImpedence_respiration = 2,
};


/// Event of XSeries device event, stored base info about event in ‘Event’ class
/// extends with additional info
SWIFT_CLASS("_TtC10XSeriesSDK10ShockEvent")
@interface ShockEvent : Event
/// The selected energy level of shosk event.
@property (nonatomic, readonly, strong) ValueUnitPair * _Nonnull energySelected;
/// The delivered energy level of shosk event.
@property (nonatomic, readonly, strong) ValueUnitPair * _Nonnull energyDelivered;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type energySelected:(ValueUnitPair * _Nonnull)energySelected energyDelivered:(ValueUnitPair * _Nonnull)energyDelivered OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type SWIFT_UNAVAILABLE;
@end

enum SnapshotType : NSInteger;
@class Waveform;

SWIFT_CLASS("_TtC10XSeriesSDK8Snapshot")
@interface Snapshot : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull Id;
@property (nonatomic, readonly) enum SnapshotType type;
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
@property (nonatomic, readonly, copy) NSDate * _Nonnull startDate;
@property (nonatomic, readonly, strong) TrendReport * _Nullable trendReport;
@property (nonatomic, readonly, copy) NSArray<Waveform *> * _Nonnull waveForms;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)Id type:(enum SnapshotType)type date:(NSDate * _Nonnull)date startDate:(NSDate * _Nonnull)startDate trendReport:(TrendReport * _Nullable)trendReport waveForms:(NSArray<Waveform *> * _Nonnull)waveForms OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// SnapshotDelegate provides the result of ‘getSnapshot’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK16SnapshotDelegate_")
@protocol SnapshotDelegate <RequestItemDelegate>
/// Called when snapshot successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides snapshot
///
/// \param snapshotId the id of requested snapshot
///
/// \param snapshot snapshot data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId snapshotId:(NSString * _Nonnull)snapshotId shapshot:(Snapshot * _Nonnull)shapshot;
@end


/// Event of XSeries device event, stored base info about event in ‘Event’ class
/// extends with additional info
SWIFT_CLASS("_TtC10XSeriesSDK13SnapshotEvent")
@interface SnapshotEvent : Event
/// The id of snapshot related to this event.
@property (nonatomic, readonly, copy) NSString * _Nonnull snapshotId;
/// The snapshot type related to this event.
@property (nonatomic, readonly) enum SnapshotType snapshotType;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type snapshotId:(NSString * _Nonnull)snapshotId snapshotType:(enum SnapshotType)snapshotType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, SnapshotType, open) {
  SnapshotTypeUnknown = 0,
  SnapshotTypePacer = 1,
  SnapshotTypeDefib = 2,
  SnapshotTypeTreatment = 3,
  SnapshotTypeMonitor = 4,
  SnapshotTypeAlarm = 5,
  SnapshotTypeAedPresenting = 6,
  SnapshotTypeAedCheckPatient = 7,
  SnapshotTypeAedAnalysisResults = 8,
  SnapshotTypeLtaAlarm = 9,
};

enum TemperatureSource : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK11Temperature")
@interface Temperature : NSObject
@property (nonatomic, readonly, strong) TrendData * _Nonnull trendData;
@property (nonatomic, readonly) enum TemperatureSource source;
- (nonnull instancetype)initWithTrendData:(TrendData * _Nonnull)trendData source:(enum TemperatureSource)source OBJC_DESIGNATED_INITIALIZER;
/// Temperature values are stored on the X-Series as ints
/// So to get real temperature value should be divided by 10
///
/// returns:
/// temperature value
- (float)getValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TemperatureSource, open) {
  TemperatureSourceNa = 0,
  TemperatureSourceUnspecified = 1,
  TemperatureSourceNone = 2,
  TemperatureSourceArt = 3,
  TemperatureSourceCore = 4,
  TemperatureSourceCereb = 5,
  TemperatureSourceRect = 6,
  TemperatureSourceSkin = 7,
};


/// Event of XSeries device event, stored base info about event in ‘Event’ class
/// extends with additional info
SWIFT_CLASS("_TtC10XSeriesSDK14TreatmentEvent")
@interface TreatmentEvent : Event
/// The label with name of treatment event.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type label:(NSString * _Nonnull)label OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10XSeriesSDK9TrendData")
@interface TrendData : NSObject
@property (nonatomic, readonly, strong) ValueUnitPair * _Nonnull value;
@property (nonatomic, readonly) enum AlarmStatus alarm;
@property (nonatomic, readonly) enum DataStatus dataStatus;
- (nonnull instancetype)initWithValue:(ValueUnitPair * _Nonnull)value alarm:(enum AlarmStatus)alarm dataStatus:(enum DataStatus)dataStatus OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// TrendDelegate provides the result of ‘getTrend’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK13TrendDelegate_")
@protocol TrendDelegate <RequestItemDelegate>
/// Called when trend successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides trend
///
/// \param trendId the id of requested trend
///
/// \param trend trend data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId trendId:(NSString * _Nonnull)trendId trend:(TrendReport * _Nonnull)trend;
@end

/// List of all possible trend origins.
typedef SWIFT_ENUM(NSInteger, TrendOrigin, open) {
  TrendOriginPERIODIC = 0,
  TrendOriginNIBP = 1,
  TrendOriginSNAPSHOT = 2,
  TrendOriginTWELVELEAD = 3,
};


/// VitalSigns provides the result of ‘getVitalSignsReport’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK10VitalSigns_")
@protocol VitalSigns
/// Get the VitalSignsReport implemented as a wrapper on top of TrendReport
- (TrendReport * _Nonnull)getVitalSignsReport SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents a single trend report retrieved from an X-Series.  A trend report
/// consists of multiple measurements of the patient’s vital signs taken
/// simultaneously.  Only 7 of the measurements are exposed via this class.
SWIFT_CLASS("_TtC10XSeriesSDK11TrendReport")
@interface TrendReport : NSObject <VitalSigns>
/// The date on which the measurements were taken.
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// The patient’s ETCO2.
@property (nonatomic, readonly, strong) TrendData * _Nonnull etco2;
/// The patient’s SPO2.
@property (nonatomic, readonly, strong) TrendData * _Nonnull spo2;
/// The patient’s heart rate.
@property (nonatomic, readonly, strong) HeartRate * _Nonnull heartRate;
/// The patient’s temperature 1.
@property (nonatomic, readonly, strong) Temperature * _Nonnull temperature1;
/// The patient’s temperature 2.
@property (nonatomic, readonly, strong) Temperature * _Nonnull temperature2;
/// The patient’s temperature delta.
@property (nonatomic, readonly, strong) Temperature * _Nonnull temperatureDelta;
/// The patient’s diastolic blood pressure.
@property (nonatomic, readonly, strong) TrendData * _Nonnull diastolicBloodPressure;
/// The patient’s systolic blood pressure.
@property (nonatomic, readonly, strong) TrendData * _Nonnull systolicBloodPressure;
/// The patient’s min arterial blood pressure.
@property (nonatomic, readonly, strong) TrendData * _Nonnull meanArterialPressure;
/// The patient’s respiration rate.
@property (nonatomic, readonly, strong) RespirationRate * _Nonnull respiration;
/// The ipb 1.
@property (nonatomic, readonly, strong) IBPReport * _Nonnull ibp1;
/// The ipb 2.
@property (nonatomic, readonly, strong) IBPReport * _Nonnull ibp2;
/// The ipb 3.
@property (nonatomic, readonly, strong) IBPReport * _Nonnull ibp3;
/// The trend origin.
@property (nonatomic, readonly) enum TrendOrigin trendOrigin;
/// Get VitalSigns Report.
- (TrendReport * _Nonnull)getVitalSignsReport SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date etco2:(TrendData * _Nonnull)etco2 spo2:(TrendData * _Nonnull)spo2 heartRate:(HeartRate * _Nonnull)heartRate temperature1:(Temperature * _Nonnull)temperature1 temperature2:(Temperature * _Nonnull)temperature2 temperatureDelta:(Temperature * _Nonnull)temperatureDelta diastolicBloodPressure:(TrendData * _Nonnull)diastolicBloodPressure systolicBloodPressure:(TrendData * _Nonnull)systolicBloodPressure meanArterialPressure:(TrendData * _Nonnull)meanArterialPressure respiration:(RespirationRate * _Nonnull)respiration ibp1:(IBPReport * _Nonnull)ibp1 ibp2:(IBPReport * _Nonnull)ibp2 ibp3:(IBPReport * _Nonnull)ibp3 trendOrigin:(enum TrendOrigin)trendOrigin OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10XSeriesSDK10TwelveLead")
@interface TwelveLead : NSObject
@property (nonatomic, readonly) NSInteger leadCount;
/// The status of this 12-lead.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull leadStatus;
/// The data of this 12-lead.
@property (nonatomic, readonly, copy) NSArray<NSArray<NSNumber *> *> * _Nonnull leadSamples;
/// The unique ID of this 12-lead.
@property (nonatomic, readonly, copy) NSString * _Nonnull twelveLeadId;
/// Amplitude multiplier. The units of measure for the multiplier are given in the Units field.
/// Each waveform data sample must be multiplied by this value to calculate the actual measured voltage (in Nanovolts).
@property (nonatomic, readonly) double amplitude;
/// The date on which the snapshot was taken.
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// Sample rate for the lead data, in Hz. Always 500.
@property (nonatomic, readonly) double sampleRate;
/// The number of samples taken from each lead.
@property (nonatomic, readonly) NSInteger sampleCount;
/// The user-definable ID of the X-Series device that took the snapshot.
@property (nonatomic, readonly, copy) NSString * _Nonnull unitId;
/// The patient hooked up to the X-Series when the snapshot was taken.
@property (nonatomic, readonly, strong) Patient * _Nonnull patient;
/// Twelve lead analysis result
@property (nonatomic, readonly, strong) AnalysisResult * _Nullable analysisResult;
/// The trend report snapshotted with the 12-lead data.
@property (nonatomic, readonly, strong) TrendReport * _Nullable trendReport;
- (nonnull instancetype)initWithLeadStatus:(NSArray<NSNumber *> * _Nonnull)leadStatus leadSamples:(NSArray<NSArray<NSNumber *> *> * _Nonnull)leadSamples twelveLeadId:(NSString * _Nonnull)twelveLeadId amplitude:(double)amplitude date:(NSDate * _Nonnull)date sampleRate:(double)sampleRate sampleCount:(NSInteger)sampleCount unitId:(NSString * _Nonnull)unitId patient:(Patient * _Nonnull)patient analysisResult:(AnalysisResult * _Nullable)analysisResult trendReport:(TrendReport * _Nullable)trendReport OBJC_DESIGNATED_INITIALIZER;
/// The length, in seconds, of the snapshot.
///
/// returns:
/// duration in seconds.
- (float)totalDurationInSeconds SWIFT_WARN_UNUSED_RESULT;
/// Retrieves raw sample value from the specified lead.
/// \param lead the lead to examine.
///
/// \param index the index of the sample to retrieve.
///
///
/// returns:
/// raw sample value.
- (NSInteger)getRawSampleFromLeadWithLead:(enum Lead)lead index:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the specified sample from the specified lead in millivolts.
/// \param lead the lead to examine.
///
/// \param index the index of the sample to retrieve.
///
///
/// returns:
/// the sample value in mV.
- (float)getSampleFromLeadWithLead:(enum Lead)lead index:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Multiplier used to convert from the normalised lead samples back to mV.
///
/// returns:
/// multiplier value
- (double)getMultiplier SWIFT_WARN_UNUSED_RESULT;
/// Determines whether or not the requested lead and sample pair contains a valid
/// reading.  Invalid readings can be produced by malfunctioning leads, etc.
/// \param lead the lead to examine.
///
/// \param index the index of the sample to verify
///
///
/// returns:
/// true is sample is valid; false if not
- (BOOL)isValidSampleFromLeadWithLead:(enum Lead)lead index:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Generates empty analysis result
- (AnalysisResult * _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// TwelveLeadDelegate provides the result of ‘getTwelveLead’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK18TwelveLeadDelegate_")
@protocol TwelveLeadDelegate <RequestItemDelegate>
/// Called when twelve lead successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides twelve lead
///
/// \param twelveLeadId the id of requested twelve lead
///
/// \param twelveLead twelve lead data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId twelveLeadId:(NSString * _Nonnull)twelveLeadId twelveLead:(TwelveLead * _Nonnull)twelveLead;
@end


/// Event of XSeries device event, stored base info about event in ‘Event’ class
/// extends with additional info
SWIFT_CLASS("_TtC10XSeriesSDK15TwelveLeadEvent")
@interface TwelveLeadEvent : Event
/// The id of twelve lead related to this event.
@property (nonatomic, readonly, copy) NSString * _Nonnull twelveLeadId;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type twelveLeadId:(NSString * _Nonnull)twelveLeadId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date type:(enum EventType)type SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, TwelveLeadPrintFormat, open) {
  TwelveLeadPrintFormatStandart = 0,
  TwelveLeadPrintFormatCabrera = 1,
};

typedef SWIFT_ENUM(NSInteger, Unit, open) {
  UnitUndefined = 0,
  UnitNone = 1,
  UnitKpa = 2,
  UnitMmhg = 3,
  UnitC = 4,
  UnitF = 5,
  UnitPercent = 6,
  UnitBpmBeats = 7,
  UnitBpmBreaths = 8,
  UnitNanovolts = 9,
  UnitMicrovolts = 10,
  UnitMillivolts = 11,
  UnitVolts = 12,
  UnitPpm = 13,
  UnitPacerPerMin = 14,
  UnitRpm = 15,
  UnitMah = 16,
  UnitMa = 17,
  UnitMOm = 18,
  UnitG_dl = 19,
  UnitMmo_l = 20,
  UnitMl_dl = 21,
  UnitJ = 22,
};


/// Represents a single value retrieved from an X-Series’ trend report.
SWIFT_CLASS("_TtC10XSeriesSDK13ValueUnitPair")
@interface ValueUnitPair : NSObject
/// The value of the trend measurement.
@property (nonatomic, readonly) float value;
/// The value’s units.
@property (nonatomic, readonly) enum Unit units;
@property (nonatomic, readonly) BOOL isValid;
- (nonnull instancetype)initWithValue:(float)value units:(enum Unit)units isValid:(BOOL)isValid OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class VitalSignsReport;

/// VitalSignsDelegate provides the result of ‘getVitalSignsReport’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK18VitalSignsDelegate_")
@protocol VitalSignsDelegate <RequestDelegate>
/// Called when current numeric successfully retrieved
/// \param requestCode the unique id of retrieving request
///
/// \param deviceId the serial number of the device that provides trend
///
/// \param vitalSignsReport VitalSignReport data model
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId vitalSignsReport:(VitalSignsReport * _Nonnull)vitalSignsReport;
@end


/// Represents  vital signs report retrieved from an X-Series.  A vital signs report
/// consists of multiple measurements of the patient’s vital signs taken
/// simultaneously.
SWIFT_CLASS("_TtC10XSeriesSDK16VitalSignsReport")
@interface VitalSignsReport : NSObject
/// The date on which the measurements were taken.
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// The vital signs.
@property (nonatomic, readonly, strong) id <VitalSigns> _Nullable vitalSigns;
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date vitalSigns:(id <VitalSigns> _Nullable)vitalSigns OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum WaveformType : NSInteger;
enum WaveformSource : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK8Waveform")
@interface Waveform : NSObject
@property (nonatomic, readonly, copy) NSDate * _Nonnull startTime;
@property (nonatomic, readonly, copy) NSDate * _Nonnull endTime;
@property (nonatomic, readonly) enum WaveformType type;
@property (nonatomic, readonly) enum WaveformSource source;
@property (nonatomic, readonly) enum Unit units;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull samples;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull status;
@property (nonatomic, readonly) float multiplier;
- (nonnull instancetype)initWithStartTime:(NSDate * _Nonnull)startTime endTime:(NSDate * _Nonnull)endTime type:(enum WaveformType)type source:(enum WaveformSource)source units:(enum Unit)units samples:(NSArray<NSNumber *> * _Nonnull)samples multiplier:(float)multiplier status:(NSArray<NSNumber *> * _Nonnull)status OBJC_DESIGNATED_INITIALIZER;
/// Calculates waveform duration in milliseconds
///
/// returns:
/// duration in milliseconds
- (NSTimeInterval)getDuration SWIFT_WARN_UNUSED_RESULT;
- (float)getSamplesWithPosition:(NSInteger)position SWIFT_WARN_UNUSED_RESULT;
/// Determines whether or not the requested sample contains a valid
/// reading. Invalid readings can be produced by malfunctioning leads, etc.
/// \param index the index of the sample to verify
///
///
/// returns:
/// true is sample is valid; false if not
- (BOOL)isValidSampleWithIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, WaveformSource, open) {
  WaveformSourceUnknown = 0,
  WaveformSourceUnspecified = 1,
  WaveformSourceNone = 2,
  WaveformSourceAbp = 3,
  WaveformSourceArt = 4,
  WaveformSourceAo = 5,
  WaveformSourceCvp = 6,
  WaveformSourceIcp = 7,
  WaveformSourceLap = 8,
  WaveformSourceP1 = 9,
  WaveformSourceP2 = 10,
  WaveformSourceP3 = 11,
  WaveformSourcePap = 12,
  WaveformSourceRap = 13,
  WaveformSourceUap = 14,
  WaveformSourceUvp = 15,
  WaveformSourceBap = 16,
  WaveformSourceFap = 17,
};

typedef SWIFT_ENUM(NSInteger, WaveformType, open) {
  WaveformTypeUnknown = 0,
  WaveformTypePads = 1,
  WaveformTypeLeadI = 2,
  WaveformTypeLeadII = 3,
  WaveformTypeLeadIII = 4,
  WaveformTypeLeadAvr = 5,
  WaveformTypeLeadAvl = 6,
  WaveformTypeLeadAvf = 7,
  WaveformTypeLeadV5LeadCable = 8,
  WaveformTypeLeadV1 = 9,
  WaveformTypeLeadV2 = 10,
  WaveformTypeLeadV3 = 11,
  WaveformTypeLeadV4 = 12,
  WaveformTypeLeadV5 = 13,
  WaveformTypeLeadV6 = 14,
  WaveformTypeCo2 = 15,
  WaveformTypeSpo2 = 16,
  WaveformTypeIbp1 = 17,
  WaveformTypeIbp2 = 18,
  WaveformTypeIbp3 = 19,
  WaveformTypeFilteredEcg = 20,
  WaveformTypeCo2Kpa = 21,
  WaveformTypeCo2Percent = 22,
  WaveformTypeIbp1Kpa = 23,
  WaveformTypeIbp2Kpa = 24,
  WaveformTypeIbp3Kpa = 25,
};


SWIFT_CLASS("_TtC10XSeriesSDK12WaveformView")
@interface WaveformView : UIScrollView <UIScrollViewDelegate>
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)handleTap:(UITapGestureRecognizer * _Nullable)recognizer;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
@end


/// Represents a case summary retrieved from an X-Series.
SWIFT_CLASS("_TtC10XSeriesSDK16XCaseCatalogItem")
@interface XCaseCatalogItem : NSObject
/// The status of the case.
@property (nonatomic, readonly) enum CaseStatus status;
/// The time on which the case was uploaded.
@property (nonatomic, readonly, copy) NSDate * _Nullable uploadTime;
/// The number of 12 leads taken during the case.
@property (nonatomic, readonly) NSInteger numberOf12Leads;
/// The number of shocks administered during the case.
@property (nonatomic, readonly) NSInteger numberOfShocks;
/// The time on which the case began.
@property (nonatomic, readonly, copy) NSDate * _Nullable startTime;
/// The time on which the case ended.
@property (nonatomic, readonly, copy) NSDate * _Nullable endTime;
/// The ID of the case.
@property (nonatomic, readonly, copy) NSString * _Nonnull caseId;
/// Indicates whether or not audio is available in the case.
@property (nonatomic, readonly) BOOL audioAvailable;
@property (nonatomic, strong) NSNumber * _Nullable _duration;
- (nonnull instancetype)initWithStatus:(enum CaseStatus)status uploadTime:(NSDate * _Nullable)uploadTime numberOf12Leads:(NSInteger)numberOf12Leads numberOfShocks:(NSInteger)numberOfShocks startTime:(NSDate * _Nullable)startTime endTime:(NSDate * _Nullable)endTime caseId:(NSString * _Nonnull)caseId audioAvailable:(BOOL)audioAvailable duration:(NSNumber * _Nullable)duration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// CaseListDelegate provides the result of ‘getCaseList’ request
SWIFT_PROTOCOL("_TtP10XSeriesSDK24XCaseCatalogItemDelegate_")
@protocol XCaseCatalogItemDelegate <RequestDelegate>
/// Called when case list successfully retrieved
/// \param requestCode the unique id of downloading request
///
/// \param deviceId the serial number of the device that provides case list
///
/// \param cases array of retreived cases
///
- (void)onRequestSuccessWithRequestCode:(NSInteger)requestCode deviceId:(NSString * _Nonnull)deviceId cases:(NSArray<XCaseCatalogItem *> * _Nonnull)cases;
@end


SWIFT_CLASS("_TtC10XSeriesSDK13XSeriesDevice")
@interface XSeriesDevice : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull serialNumber;
@property (nonatomic, readonly, copy) NSString * _Nonnull ipAdress;
- (nonnull instancetype)initWithSerialNumber:(NSString * _Nonnull)serialNumber ipAdress:(NSString * _Nonnull)ipAdress OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ZOXErrorType : NSInteger;

SWIFT_CLASS("_TtC10XSeriesSDK8ZOXError")
@interface ZOXError : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull errorMessage;
@property (nonatomic, readonly) enum ZOXErrorType errorType;
- (nonnull instancetype)initWithType:(enum ZOXErrorType)type message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ZOXErrorType, open) {
  ZOXErrorTypeUndefined = 0,
/// Looking the ZOXSeries device in local network with Bonjour services can’t started, check your network setting.
  ZOXErrorTypeDeviceDiscovering = 1,
/// ZOXSeries device founded in local network, but can’t be resolved.
  ZOXErrorTypeDeviceDiscoveryResolve = 2,
/// The answer from ZOXSeries is broken or can’t be parsed.
  ZOXErrorTypeResponseParse = 3,
/// The answer from ZOXSeries is broken or can’t be parsed.
  ZOXErrorTypeJsonParse = 4,
/// The request failed with network error, please try again later.
  ZOXErrorTypeNetwork = 5,
/// Not enough free space for saving json case file.
  ZOXErrorTypeNotEnoughtFreeSpace = 6,
/// Error during the saving file to provided folder.
  ZOXErrorTypeFileSaving = 7,
/// Error during the cration PNG image in Graphic Context
  ZOXErrorTypeImageCreate = 8,
/// Provided file is null or can’t found on disk.
  ZOXErrorTypeFileNotFound = 9,
/// Provided file has unsupported format
  ZOXErrorTypeUnsuportedFormat = 10,
/// Provided JSON is not ZOLL json
  ZOXErrorTypeInvalidSchema = 11,
/// Provided wrong cradencials
  ZOXErrorTypeInvalidCredentials = 12,
/// Provided invalid character
  ZOXErrorTypeInvalidCharacter = 13,
};


SWIFT_CLASS("_TtC10XSeriesSDK9ZOXSeries")
@interface ZOXSeries : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) ZOXSeries * _Nonnull shared;)
+ (ZOXSeries * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(ZOXSeries * _Nonnull)value;
/// DeviceBrowser implementation
@property (nonatomic, readonly, strong) id <DeviceApi> _Nonnull deviceBrowser;
/// DeviceApi implementation
@property (nonatomic, readonly, strong) id <DevicesBrowser> _Nonnull xSeriesBrowser;
/// CaseParser implementation
@property (nonatomic, readonly, strong) id <CaseParser> _Nonnull caseParser;
/// ReportGenerator implementation
@property (nonatomic, readonly, strong) id <ReportGenerator> _Nonnull reportGenerator;
/// About implementation
/// Exposes a version property that returns SDK version
@property (nonatomic, readonly, strong) About * _Nonnull about;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
